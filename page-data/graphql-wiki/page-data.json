{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/graphql-wiki/",
    "result": {"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io","thumbnail":"/thumbnails/zzal.jpg"}},"markdownRemark":{"id":"1b69f728-9e25-58a9-b10e-68e8a3402d8f","tableOfContents":"<ul>\n<li>\n<p><a href=\"#graphql-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\">graphQL 등장 배경</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%9E%A5%EC%A0%90\">장점</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%8B%A8%EC%A0%90\">단점</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EB%B2%95\">문법</a></p>\n<ul>\n<li><a href=\"#gql\">gql</a></li>\n<li><a href=\"#resolver\">resolver</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%84%9C%ED%99%94\">문서화</a></p>\n</li>\n<li>\n<p><a href=\"#rest---graphql-%EB%9E%98%ED%95%91\">REST -> GraphQL 래핑</a></p>\n</li>\n<li>\n<p><a href=\"#error-%EC%B2%98%EB%A6%AC\">error 처리</a></p>\n</li>\n<li>\n<p><a href=\"#cache\">Cache</a></p>\n</li>\n<li>\n<p><a href=\"#devtool\">Devtool</a></p>\n</li>\n</ul>","excerpt":"회사에서 레거시 어드민을 개편하면서 프론트선에서 기존 ORM 들을  으로 간단하게 API로 만들고 거기에 graphQL을 활용하기로 했다. 그래서 공부하는 graphQL. 예제코드 저장소 graphQL 등장 배경 graphQL은 REST API…","html":"<p>회사에서 레거시 어드민을 개편하면서 프론트선에서 기존 ORM 들을 <code class=\"language-text\">res.json</code> 으로 간단하게 API로 만들고 거기에 graphQL을 활용하기로 했다. 그래서 공부하는 graphQL.</p>\n<p><a href=\"https://github.com/emewjin/tweetql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">예제코드 저장소</a></p>\n<h2 id=\"graphql-등장-배경\" style=\"position:relative;\"><a href=\"#graphql-%EB%93%B1%EC%9E%A5-%EB%B0%B0%EA%B2%BD\" aria-label=\"graphql 등장 배경 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>graphQL 등장 배경</h2>\n<p>graphQL은 REST API의 문제를 해결하기 위해 등장했다고 알려져있다.</p>\n<ol>\n<li>over-fetching<br>\nREST API는 필요하지 않은 정보도 백엔드에서 프론트엔드로 전달해주는데 이게 비효율적이라는 이야기이다. 예를 들어 프론트엔드에서는 company의 title, url만 필요한데 백엔드에서는 두 필드 뿐 아니라 직원수, 설립일, 주소, 평균연봉, 퇴사율, 입사율 등등 필요없는 필드까지 다 넘겨준다는 것이다.<br>\ngraphQL에서는 title, url만 보내달라고 요청하기 때문에 필요한 필드만 응답으로 받을 수 있다.</li>\n<li>under-fetching<br>\n한 api에서 필요한 정보를 전부 주지 않아 2번 이상의 api 요청을 해야하는 것을 말한다. 예를 들어 company 리스트를 조회하는 api에서 응답으로 준게 company id 뿐이라면, 각 company의 상세 정보를 조회하기 위해 company 상세정보를 조회하는 api에 id를 이용해 요청을 보내야 한다는 것이다.<br>\ngraphQL에서는 single request에 다양한 resource를 응답하는 것으로 이 문제를 해결했다.</li>\n</ol>\n<p>REST api와는 url의 집합이 아닌 data의 type의 집합이라는 차이점이 있다.</p>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>Root를 보면 리소스 모두 타입을 가지고 있어 그 자체로 명세가 되고 이해하기 쉬움.</li>\n<li>타입 지원을 받을 수 있음.</li>\n<li>over fetching, under fetching 해결 가능</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<h2 id=\"문법\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95\" aria-label=\"문법 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법</h2>\n<h3 id=\"gql\" style=\"position:relative;\"><a href=\"#gql\" aria-label=\"gql permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>gql</h3>\n<ul>\n<li>gql <code class=\"language-text\">SDL</code> : schema definition language의 약자로, gql에게 data shape을 설명하기 위함\n<ul>\n<li>반드시 Query root type이 있어야 함.</li>\n<li>모든 필드는 기본적으로 nullable</li>\n</ul>\n</li>\n<li><code class=\"language-text\">[Type]</code> : 배열(리스트)를 의미</li>\n<li><code class=\"language-text\">!</code>: required를 의미\n<ul>\n<li>arg에 붙으면 필수 인자, return 값에 붙으면 non-nullable을 의미</li>\n<li>required arg를 넘기지 않으면 <code class=\"language-text\">Field \"tweet\" argument \"id\" of type \"ID!\" is required, but it was not provided.</code> 에러 발생</li>\n<li>return type이 ! 인데 resolver가 없으면 <code class=\"language-text\">\"message\": \"Cannot return null for non-nullable field Query.tweet.\"</code> 에러 발생</li>\n</ul>\n</li>\n<li>REST API를 기준으로 생각했을 때\n<ul>\n<li>GET : <code class=\"language-text\">type Query</code></li>\n<li>POST, DELETE, PUT과 같이 mutate하는 모든 것들 : <code class=\"language-text\">type Mutation</code></li>\n</ul>\n</li>\n<li>Scalar type : graphql 내장 타입. String, Int, Boolean, ID 등등이 있다.</li>\n</ul>\n<p><strong>Operation</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">query ExampleQuery {\n  allTweets {\n    id\n  }\n  tweet(id: &quot;2&quot;) {\n    text\n  }\n}\n\nmutation {\n  postTweet {\n    id\n  }\n}</code></pre></div>\n<h3 id=\"resolver\" style=\"position:relative;\"><a href=\"#resolver\" aria-label=\"resolver permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>resolver</h3>\n<ul>\n<li>모든 타입의 모든 필드에 대해 작성 가능</li>\n<li>연산 및 유사 join 가능</li>\n</ul>\n<h2 id=\"문서화\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%84%9C%ED%99%94\" aria-label=\"문서화 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문서화</h2>\n<p>거의 대부분의 graphQL 클라이언트들이 문서를 지원하고 있음.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/170818386-8c1df94c-f2f1-4594-b742-46158e8974f7.png\" alt=\"image\"></p>\n<h2 id=\"rest---graphql-래핑\" style=\"position:relative;\"><a href=\"#rest---graphql-%EB%9E%98%ED%95%91\" aria-label=\"rest   graphql 래핑 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST -> GraphQL 래핑</h2>\n<ul>\n<li>FE에서는 GraphQL을, BE에서는 REST를 쓰고 싶을 때</li>\n<li>기존재하는 REST api를 GraphQL로 쓰고 싶을 때</li>\n</ul>\n<p>아주 작은 GraphQL 서버를 쓰거나 express 서버 최상단에 apollo를 두고 REST api를 GraphQL로 변환할 수 있다.</p>\n<p>type, field를 하나하나 다 선언해주어야 하는데 매우 귀찮아보임. 대신해주는 툴이 분명히 있을듯…<br>\n그리고 resolver에서 fetch해서 그 응답값을 반환하도록 래핑하는 것.</p>\n<h2 id=\"error-처리\" style=\"position:relative;\"><a href=\"#error-%EC%B2%98%EB%A6%AC\" aria-label=\"error 처리 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>error 처리</h2>\n<h2 id=\"cache\" style=\"position:relative;\"><a href=\"#cache\" aria-label=\"cache permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache</h2>\n<p>아폴로 클라이언트는 type과 id로 데이터 entity를 생성한다. 만약 gql에 새로운 필드를 추가해 요청해도,새로운 데이터 또한 새로 생성되는 게 아니라 캐싱된 entity안에 추가된다.</p>\n<h2 id=\"devtool\" style=\"position:relative;\"><a href=\"#devtool\" aria-label=\"devtool permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Devtool</h2>\n<p>apollo에서 크롬 익스텐션을 지원하기 때문에 다음과 같이 어떤 쿼리가 실행되었는지 추적할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/76927618/170827861-96c6582f-7c24-4101-b27b-f9438bb5b61d.png\" alt=\"image\"></p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">const GET_ALL_MOVIES = gql`\n  {\n    allMovies {\n      title\n      id\n    }\n  }\n`;</code></pre></div>\n<p>이렇게 쿼리에 이름을 지어주지 않으면 이미지에서처럼 Unnamed라고 나오니 지어주는 편이 디버깅하기에 좋다.</p>","fields":{"slug":"/graphql-wiki/"},"frontmatter":{"title":"graphQL 위키","date":"2022-05-29","lastUpdated":"2022-05-29","description":null,"tags":["graphQL"],"thumbnail":null}},"previous":{"fields":{"slug":"/culture/"},"frontmatter":{"title":"팀문화, 작은 것부터 시작하기"}},"next":{"fields":{"slug":"/playwright/"},"frontmatter":{"title":"Playwright로 테스트 작성하기 위키"}}},"pageContext":{"id":"1b69f728-9e25-58a9-b10e-68e8a3402d8f","previousPostId":"bdd01e6c-69de-5048-8a19-6d694e58a57c","nextPostId":"989649d3-bdf1-59eb-8a2b-51796a77be74"}},
    "staticQueryHashes": ["2260143708","658623446","984448874"]}