{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/es-new/","result":{"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io"}},"markdownRemark":{"id":"3f7a26e9-cb4e-554d-85da-0847e295e283","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-ecmascript-2025%EC%9D%98-%ED%8E%B8%EC%A7%91%EC%9E%90%EB%93%A4\">1. ECMAScript 2025의 편집자들</a></p>\n</li>\n<li>\n<p><a href=\"#2-ecmascript-2025%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B8%B0%EB%8A%A5%EC%9D%80\">2. ECMAScript 2025의 새로운 기능은?</a></p>\n<ul>\n<li>\n<p><a href=\"#21-import-%EC%86%8D%EC%84%B1%EA%B3%BC-json-%EB%AA%A8%EB%93%88\">2.1 <code class=\"language-text\">import</code> 속성과 JSON 모듈</a></p>\n</li>\n<li>\n<p><a href=\"#22-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%97%AC%ED%8D%BC-%EB%A9%94%EC%84%9C%EB%93%9C\">2.2 이터레이터 헬퍼 메서드</a></p>\n<ul>\n<li><a href=\"#221-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-%EB%B0%B0%EC%97%B4-%EB%A9%94%EC%84%9C%EB%93%9C%EB%B3%B4%EB%8B%A4-%EB%82%98%EC%9D%80-%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\">2.2.1 이터레이터 메서드가 배열 메서드보다 나은 점은 무엇인가요?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#23-%EC%83%88%EB%A1%9C%EC%9A%B4-set-%EB%A9%94%EC%84%9C%EB%93%9C\">2.3 새로운 Set 메서드</a></p>\n</li>\n<li>\n<p><a href=\"#24-regexpescape\">2.4 <code class=\"language-text\">RegExp.escape()</code></a></p>\n</li>\n<li>\n<p><a href=\"#25-%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8C%A8%ED%84%B4-%EC%88%98%EC%A0%95%EC%9E%90-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%94%8C%EB%9E%98%EA%B7%B8\">2.5 정규식 패턴 수정자 (인라인 플래그)</a></p>\n</li>\n<li>\n<p><a href=\"#26-%EC%A4%91%EB%B3%B5%EB%90%9C-%EC%9D%B4%EB%A6%84%EC%9D%98-%EC%BA%A1%EC%B2%98-%EA%B7%B8%EB%A3%B9\">2.6 중복된 이름의 캡처 그룹</a></p>\n</li>\n<li>\n<p><a href=\"#27-promisetry\">2.7 <code class=\"language-text\">Promise.try()</code></a></p>\n</li>\n<li>\n<p><a href=\"#28-16%EB%B9%84%ED%8A%B8-%EB%B6%80%EB%8F%99-%EC%86%8C%EC%88%98%EC%A0%90-%EC%88%AB%EC%9E%90float16-%EC%A7%80%EC%9B%90\">2.8 16비트 부동 소수점 숫자(float16) 지원</a></p>\n</li>\n<li>\n<p><a href=\"#ecmascript-2025%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AC%B4%EB%A3%8C-%EC%B1%85\"><strong>ECMAScript 2025에 대한 무료 책</strong></a></p>\n</li>\n</ul>\n</li>\n</ul>","excerpt":"원문: Ecma International approves ECMAScript 2025: What’s new? 2025년 6월 25일, 제129회 Ecma 총회는 ECMAScript 202…","html":"<blockquote>\n<p>원문: <a href=\"https://2ality.com/2025/06/ecmascript-2025.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ecma International approves ECMAScript 2025: What’s new?</a></p>\n</blockquote>\n<p>2025년 6월 25일, 제129회 Ecma 총회는 ECMAScript 2025 언어 사양을 승인했습니다 (<a href=\"https://ecma-international.org/news/ecma-international-approves-new-standards-11/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">보도 자료</a>). 이는 이제 공식적으로 표준이 되었음을 의미합니다. 이 블로그 게시물은 새로운 기능에 대해 설명합니다.</p>\n<h2 id=\"1-ecmascript-2025의-편집자들\" style=\"position:relative;\"><a href=\"#1-ecmascript-2025%EC%9D%98-%ED%8E%B8%EC%A7%91%EC%9E%90%EB%93%A4\" aria-label=\"1 ecmascript 2025의 편집자들 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. ECMAScript 2025의 편집자들</h2>\n<p>이 릴리스의 편집자들은 다음과 같습니다.</p>\n<ul>\n<li>Shu‑yu Guo</li>\n<li>Michael Ficarra</li>\n<li>Kevin Gibbons</li>\n</ul>\n<h2 id=\"2-ecmascript-2025의-새로운-기능은\" style=\"position:relative;\"><a href=\"#2-ecmascript-2025%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%EA%B8%B0%EB%8A%A5%EC%9D%80\" aria-label=\"2 ecmascript 2025의 새로운 기능은 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. ECMAScript 2025의 새로운 기능은?</h2>\n<h3 id=\"21-import-속성과-json-모듈\" style=\"position:relative;\"><a href=\"#21-import-%EC%86%8D%EC%84%B1%EA%B3%BC-json-%EB%AA%A8%EB%93%88\" aria-label=\"21 import 속성과 json 모듈 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1 <code class=\"language-text\">import</code> 속성과 JSON 모듈</h3>\n<p><a href=\"https://exploringjs.com/js/book/ch_modules.html#import-attributes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">import</code> 속성</a>은 자바스크립트가 아닌 아티팩트를 가져오기 위한 구문적 기반을 제공합니다. 지원되는 첫 번째 아티팩트는 <a href=\"https://exploringjs.com/js/book/ch_modules.html#json-modules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JSON 모듈</a>입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 정적 임포트</span>\n<span class=\"token keyword\">import</span> configData1 <span class=\"token keyword\">from</span> <span class=\"token string\">'./config-data.json'</span> <span class=\"token keyword\">with</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 동적 임포트</span>\n<span class=\"token keyword\">const</span> configData2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'./config-data.json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">with</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'json'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">with</code> 뒤의 객체 리터럴 구문은 임포트 속성을 지정하는 데 사용됩니다. <code class=\"language-text\">type</code>은 임포트 속성입니다.</p>\n<h3 id=\"22-이터레이터-헬퍼-메서드\" style=\"position:relative;\"><a href=\"#22-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%97%AC%ED%8D%BC-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"22 이터레이터 헬퍼 메서드 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2 이터레이터 헬퍼 메서드</h3>\n<p><a href=\"https://exploringjs.com/js/book/ch_sync-iteration.html#class-iterator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이터레이터 헬퍼 메서드</a>를 사용하면 이터레이터로 더 많은 작업을 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  arr\n    <span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 이터레이터 생성</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">drop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">=</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'=b='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'=c='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'=d='</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>일부 이터레이터 헬퍼 메서드는 동일한 이름의 배열 메서드처럼 작동합니다.</p>\n<ul>\n<li>이터레이터를 반환하는 메서드:\n<ul>\n<li><code class=\"language-text\">iterator.filter(filterFn)</code></li>\n<li><code class=\"language-text\">iterator.map(mapFn)</code></li>\n<li><code class=\"language-text\">iterator.flatMap(mapFn)</code></li>\n</ul>\n</li>\n<li>불리언을 반환하는 메서드:\n<ul>\n<li><code class=\"language-text\">iterator.some(fn)</code></li>\n<li><code class=\"language-text\">iterator.every(fn)</code></li>\n</ul>\n</li>\n<li>다른 값을 반환하는 메서드:\n<ul>\n<li><code class=\"language-text\">iterator.find(fn)</code></li>\n<li><code class=\"language-text\">iterator.reduce(reducer, initialValue?)</code></li>\n</ul>\n</li>\n<li>값을 반환하지 않는 메서드:\n<ul>\n<li><code class=\"language-text\">iterator.forEach(fn)</code></li>\n</ul>\n</li>\n</ul>\n<p>그 외에는 이터레이터의 고유한 헬퍼 메서드입니다.</p>\n<ul>\n<li><code class=\"language-text\">iterator.drop(limit)</code>\n<code class=\"language-text\">iterator</code>의 처음 <code class=\"language-text\">limit</code>개 요소를 제외한 이터레이터를 반환합니다.</li>\n<li><code class=\"language-text\">iterator.take(limit)</code>\n<code class=\"language-text\">iterator</code>의 처음 <code class=\"language-text\">limit</code>개 요소만 포함하는 이터레이터를 반환합니다.</li>\n<li><code class=\"language-text\">iterator.toArray()</code>\n<code class=\"language-text\">iterator</code>의 나머지 모든 요소를 배열에 모아 반환합니다.</li>\n</ul>\n<h4 id=\"221-이터레이터-메서드가-배열-메서드보다-나은-점은-무엇인가요\" style=\"position:relative;\"><a href=\"#221-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0-%EB%A9%94%EC%84%9C%EB%93%9C%EA%B0%80-%EB%B0%B0%EC%97%B4-%EB%A9%94%EC%84%9C%EB%93%9C%EB%B3%B4%EB%8B%A4-%EB%82%98%EC%9D%80-%EC%A0%90%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94\" aria-label=\"221 이터레이터 메서드가 배열 메서드보다 나은 점은 무엇인가요 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2.1 이터레이터 메서드가 배열 메서드보다 나은 점은 무엇인가요?</h4>\n<ul>\n<li>이터레이터 메서드는 모든 이터러블 데이터 구조와 함께 사용할 수 있습니다. 예를 들어, <code class=\"language-text\">Set</code> 및 <code class=\"language-text\">Map</code> 데이터 구조를 필터링하고 매핑할 수 있습니다.</li>\n<li>이터레이터 메서드는 중간 배열을 생성하지 않고 데이터를 점진적으로 계산합니다. 이는 대량의 데이터에 유용합니다.\n<ul>\n<li>이터레이터 메서드를 사용하면 모든 메서드가 첫 번째 값에 적용된 다음 두 번째 값에 적용되는 식입니다.</li>\n<li>배열 메서드를 사용하면 첫 번째 메서드가 모든 값에 적용된 다음 두 번째 메서드가 모든 결과에 적용되는 식입니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"23-새로운-set-메서드\" style=\"position:relative;\"><a href=\"#23-%EC%83%88%EB%A1%9C%EC%9A%B4-set-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"23 새로운 set 메서드 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3 새로운 Set 메서드</h3>\n<p>여러 새로운 <code class=\"language-text\">Set</code> 메서드가 있습니다.</p>\n<ul>\n<li><a href=\"https://exploringjs.com/js/book/ch_sets.html#combining-sets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Set 결합</a>\n<ul>\n<li><code class=\"language-text\">Set.prototype.intersection(other)</code></li>\n<li><code class=\"language-text\">Set.prototype.union(other)</code></li>\n<li><code class=\"language-text\">Set.prototype.difference(other)</code></li>\n<li><code class=\"language-text\">Set.prototype.symmetricDifference(other)</code></li>\n</ul>\n</li>\n<li><a href=\"https://exploringjs.com/js/book/ch_sets.html#checking-set-relationships\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Set 관계 확인</a>\n<ul>\n<li><code class=\"language-text\">Set.prototype.isSubsetOf(other)</code></li>\n<li><code class=\"language-text\">Set.prototype.isSupersetOf(other)</code></li>\n<li><code class=\"language-text\">Set.prototype.isDisjointFrom(other)</code></li>\n</ul>\n</li>\n</ul>\n<p>예시는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">assert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">intersection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSubsetOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isSupersetOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"24-regexpescape\" style=\"position:relative;\"><a href=\"#24-regexpescape\" aria-label=\"24 regexpescape permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4 <code class=\"language-text\">RegExp.escape()</code></h3>\n<p><a href=\"https://exploringjs.com/js/book/ch_regexps.html#RegExp.escape\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">RegExp.escape()</code></a>는 정규식 내에서 사용할 수 있도록 텍스트를 이스케이프 처리합니다. 예를 들어, 다음 코드는 따옴표로 묶이지 않은 <code class=\"language-text\">str</code> 내의 모든 <code class=\"language-text\">text</code> 발생을 제거합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">removeUnquotedText</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str<span class=\"token punctuation\">,</span> text</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> regExp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">(?&lt;!“)</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>RegExp<span class=\"token punctuation\">.</span><span class=\"token function\">escape</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">(?!”)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'gu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replaceAll</span><span class=\"token punctuation\">(</span>regExp<span class=\"token punctuation\">,</span> <span class=\"token string\">'•'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">removeUnquotedText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'“yes” and yes and “yes”'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'yes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'“yes” and • and “yes”'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"25-정규식-패턴-수정자-인라인-플래그\" style=\"position:relative;\"><a href=\"#25-%EC%A0%95%EA%B7%9C%EC%8B%9D-%ED%8C%A8%ED%84%B4-%EC%88%98%EC%A0%95%EC%9E%90-%EC%9D%B8%EB%9D%BC%EC%9D%B8-%ED%94%8C%EB%9E%98%EA%B7%B8\" aria-label=\"25 정규식 패턴 수정자 인라인 플래그 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.5 정규식 패턴 수정자 (인라인 플래그)</h3>\n<p><a href=\"https://exploringjs.com/js/book/ch_regexps.html#regexp-pattern-modifiers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">정규식 패턴 수정자(인라인 플래그)</a>를 사용하면 정규식의 전체가 아닌 일부에 플래그를 적용할 수 있습니다. 예를 들어, 다음 정규식에서 <code class=\"language-text\">i</code> 플래그는 “HELLO”에만 적용됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">></span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^x(?i:HELLO)x$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xHELLOx'</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^x(?i:HELLO)x$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xhellox'</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">true</span>\n<span class=\"token operator\">></span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^x(?i:HELLO)x$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'XhelloX'</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">false</span></code></pre></div>\n<h3 id=\"26-중복된-이름의-캡처-그룹\" style=\"position:relative;\"><a href=\"#26-%EC%A4%91%EB%B3%B5%EB%90%9C-%EC%9D%B4%EB%A6%84%EC%9D%98-%EC%BA%A1%EC%B2%98-%EA%B7%B8%EB%A3%B9\" aria-label=\"26 중복된 이름의 캡처 그룹 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.6 중복된 이름의 캡처 그룹</h3>\n<p><a href=\"https://exploringjs.com/js/book/ch_regexps.html#duplicate-named-capture-groups\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">중복된 이름의 캡쳐 그룹:</a> 이제 동일한 그룹 이름을 두 번 사용할 수 있습니다. 단, 다른 대안에 나타나는 경우에 한합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">RE</span> <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;chars>a+)|(?&lt;chars>b+)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">v</span></span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RE</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">chars</span><span class=\"token operator\">:</span> <span class=\"token string\">'aaa'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RE</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">chars</span><span class=\"token operator\">:</span> <span class=\"token string\">'bb'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">__proto__</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"27-promisetry\" style=\"position:relative;\"><a href=\"#27-promisetry\" aria-label=\"27 promisetry permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.7 <code class=\"language-text\">Promise.try()</code></h3>\n<p><a href=\"https://exploringjs.com/js/book/ch_promises.html#Promise.try\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Promise.try()</code></a>를 사용하면 순수하게 비동기적이지 않은 코드로 Promise 체인을 시작할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">computeAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">try</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> <span class=\"token function\">syncFuncMightThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"28-16비트-부동-소수점-숫자float16-지원\" style=\"position:relative;\"><a href=\"#28-16%EB%B9%84%ED%8A%B8-%EB%B6%80%EB%8F%99-%EC%86%8C%EC%88%98%EC%A0%90-%EC%88%AB%EC%9E%90float16-%EC%A7%80%EC%9B%90\" aria-label=\"28 16비트 부동 소수점 숫자float16 지원 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.8 16비트 부동 소수점 숫자(float16) 지원</h3>\n<p>이 지원은 다음 기능을 제공합니다.</p>\n<ul>\n<li><a href=\"https://exploringjs.com/js/book/ch_math.html#rounding-floats\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Math.f16round()</code></a></li>\n<li><a href=\"https://exploringjs.com/js/book/ch_typed-arrays.html#typed-array-element-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Typed Arrays API를 위한 새로운 요소 타입</a>:\n<ul>\n<li><code class=\"language-text\">Float16Array</code></li>\n<li><code class=\"language-text\">DataView.prototype.getFloat16()</code></li>\n<li><code class=\"language-text\">DataView.prototype.setFloat16()</code></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ecmascript-2025에-대한-무료-책\" style=\"position:relative;\"><a href=\"#ecmascript-2025%EC%97%90-%EB%8C%80%ED%95%9C-%EB%AC%B4%EB%A3%8C-%EC%B1%85\" aria-label=\"ecmascript 2025에 대한 무료 책 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>ECMAScript 2025에 대한 무료 책</strong></h3>\n<p>제 책 <a href=\"https://exploringjs.com/js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“Exploring JavaScript (ES2025 Edition)”</a>은 온라인에서 무료로 읽을 수 있습니다. 특히 두 장이 관련이 있습니다:</p>\n<ul>\n<li><a href=\"https://exploringjs.com/js/book/ch_history.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“History and evolution of JavaScript”</a>: ECMAScript 대 JavaScript, TC39, TC39 프로세스, ECMAScript 제안 등.</li>\n<li><a href=\"https://exploringjs.com/js/book/ch_new-javascript-features.html#ch_new-javascript-features\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“New JavaScript features”</a>: 각 ECMAScript 버전의 새로운 기능은 무엇인가?</li>\n</ul>\n<blockquote>\n<p>🚀 한국어로 된 프런트엔드 아티클을 빠르게 받아보고 싶다면 <a href=\"https://kofearticle.substack.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Korean FE Article</a>을 구독해주세요!</p>\n</blockquote>","fields":{"slug":"/es-new/"},"frontmatter":{"title":"(번역) Ecma International, ECMAScript 2025 승인 - 새로운 기능은?","date":"2025-07-06","lastUpdated":"2025-07-06","description":null,"tags":["번역","Typescript"]}},"previous":{"fields":{"slug":"/go-guide-for-js/"},"frontmatter":{"title":"(번역) 자바스크립트 개발자를 위한 Go 가이드"}},"next":{"fields":{"slug":"/proud-128-kb/"},"frontmatter":{"title":"(번역) 내 생애 가장 자랑스러운 128킬로바이트"}}},"pageContext":{"id":"3f7a26e9-cb4e-554d-85da-0847e295e283","previousPostId":"2c80a0bb-5f0b-5156-a69f-07c1781d5322","nextPostId":"2ad58daf-4d7e-5ef8-8149-88dfe7435035","ogImage":"public/og-image/es-new/index.png"}},"staticQueryHashes":["2260143708","984448874"]}