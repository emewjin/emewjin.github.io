{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/array-map/","result":{"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io"}},"markdownRemark":{"id":"459ace49-3128-57b3-9379-1c45a9fd5b60","tableOfContents":"<ul>\n<li>\n<p><a href=\"#array-map%EC%9D%84-%EA%B9%8A%EA%B2%8C-%ED%8C%8C%EB%B3%B4%EC%9E%90\">Array map을 깊게 파보자</a></p>\n<ul>\n<li>\n<p><a href=\"#-map%EC%97%90%EC%84%9C-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0\">🌳 map에서 화살표 함수를 쓰는 이유</a></p>\n</li>\n<li>\n<p><a href=\"#-%EB%8B%A4%EB%A5%B8-array-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80%EC%9D%98-%ED%99%9C%EC%9A%A9\">🌳 다른 array 메소드와의 활용</a></p>\n<ul>\n<li><a href=\"#-foreach\">🌱 forEach</a></li>\n<li><a href=\"#-filter\">🌱 filter</a></li>\n<li><a href=\"#-reduce\">🌱 reduce</a></li>\n<li><a href=\"#-reverse\">🌱 reverse</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-map%EC%9D%98-%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%99%9C%EC%9A%A9\">🌳 map의 복잡한 활용</a></p>\n<ul>\n<li><a href=\"#-%EA%B0%9D%EC%B2%B4-value-%EC%B6%94%EC%B6%9C\">🌱 객체 value 추출</a></li>\n<li><a href=\"#-%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B6%80-%EC%88%9C%ED%9A%8C\">🌱 객체 내부 순회</a></li>\n<li><a href=\"#-%EC%A1%B0%EA%B1%B4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">🌱 조건 적용하기</a></li>\n<li><a href=\"#-%EB%B0%B0%EC%97%B4-%EC%95%88%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%97%90-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\">🌱 배열 안의 배열에 적용하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#-map-%EB%94%94%EB%B2%84%EA%B9%85\">🌳 map 디버깅</a></p>\n<ul>\n<li><a href=\"#-map-is-not-a-function\">🌱 <code class=\"language-text\">map is not a function</code></a></li>\n<li><a href=\"#-logging-values-inside-of-map\">🌱 Logging values inside of map</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","excerpt":"Array map을 깊게 파보자 📌 이 글의 내용은 BENJAMIN JOHNSON의 Deep Dive into JavaScript’s Array Map Method…","html":"<h1 id=\"array-map을-깊게-파보자\" style=\"position:relative;\"><a href=\"#array-map%EC%9D%84-%EA%B9%8A%EA%B2%8C-%ED%8C%8C%EB%B3%B4%EC%9E%90\" aria-label=\"array map을 깊게 파보자 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array map을 깊게 파보자</h1>\n<blockquote>\n<p>📌 이 글의 내용은 <a href=\"https://www.robinwieruch.de/javascript-map-array\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BENJAMIN JOHNSON의 Deep Dive into JavaScript’s Array Map Method</a>를 기반으로 작성되었습니다. 번역글이라고 하기엔 퀄리티가 부끄럽지만 사실상 번역글.</p>\n<p>📌 글이 굉장히 깁니다. 원본 글부터가 매우… 길기 때문이죠… 🌝</p>\n</blockquote>\n<p><span style=\"color:hotpink;\"><strong>원하는 객체와 배열을 자유자재로 만들 수 있어야 합니다.</strong></span> 그러기 위해서 알아두어야 할 것 중 하나가 array 메소드입니다. 그중에서도 활용도가 높은 map 메소드에 대해 깊게 파는 게시글을 보고 공부한 것을 정리해보았습니다.</p>\n<blockquote>\n<p><code class=\"language-text\">array.map((value, index, array) => { ... });</code></p>\n<p>map 메소드의 콜백함수는 세 가지를 인자로 받을 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">value</code> : 배열의 각 요소를 나타냅니다.</li>\n<li><code class=\"language-text\">index</code> : 처리할 현재 요소의 인덱스.</li>\n<li><code class=\"language-text\">array</code> : map()을 호출한 배열.</li>\n</ul>\n</blockquote>\n<p>배열 안의 모든 요소에 대해 함수를 실행하고, 그 결과로 이루어진 새로운 배열을 반환합니다. <span style=\"color:hotpink;\"><strong>이때 원본 배열은 변경되지 않습니다.</strong></span> 결과적으로 for loops를 돌리는 것과 같지만, for문 대신 map 메소드를 사용하는 것은</p>\n<ul>\n<li>반복되는 부분만 적기 때문에 코드의 가독성이 증가합니다.</li>\n<li>코드를 작성하는 양을 줄일 수 있습니다.</li>\n</ul>\n<p>이 두 가지 이유 때문입니다.</p>\n<h2 id=\"-map에서-화살표-함수를-쓰는-이유\" style=\"position:relative;\"><a href=\"#-map%EC%97%90%EC%84%9C-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%93%B0%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\" map에서 화살표 함수를 쓰는 이유 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 map에서 화살표 함수를 쓰는 이유</h2>\n<p>map 메소드의 콜백함수로 화살표 함수를 주로 쓰는 이유는 syntax적으로 부담을 주지 않는 선에서 반복할 내용을 인라인으로 정의할 수 있기 때문입니다. 이름이 있는 full function syntax를 사용할 때처럼 개발자 도구의 stack trace에 함수 이름이 표시되지는 않지만, 대신 map의 콜백을 쉽게 읽을 수 있다는 장점이 있습니다.</p>\n<h2 id=\"-다른-array-메소드와의-활용\" style=\"position:relative;\"><a href=\"#-%EB%8B%A4%EB%A5%B8-array-%EB%A9%94%EC%86%8C%EB%93%9C%EC%99%80%EC%9D%98-%ED%99%9C%EC%9A%A9\" aria-label=\" 다른 array 메소드와의 활용 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 다른 array 메소드와의 활용</h2>\n<p>map과 비슷한 다른 메소드들에 대해 알아보고, map과 어떻게 함께 활용할 수 있는지 알아봅니다.</p>\n<p>먼저 알아둘 것은 다음과 같습니다. map과 filter는 <code class=\"language-text\">immutable operation</code>으로 <span style=\"color:hotpink;\"><strong>원본 배열은 건드리지 않고</strong></span> 새로운 배열로 반환합니다. 반면 <span style=\"color:hotpink;\"> <strong>원본 배열에 변동을 바로 반영</strong></span>하는 것을 <code class=\"language-text\">mutable operation</code>이라고 합니다. reverse, push 등이 있습니다.</p>\n<h3 id=\"-foreach\" style=\"position:relative;\"><a href=\"#-foreach\" aria-label=\" foreach permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 forEach</h3>\n<p>forEach 메소드 또한 배열의 각 요소에 대해 한번씩 실행된다는 점에서는 map과 동일하지만, <span style=\"color:hotpink;\"><strong>가장 큰 차이점은 return하는 것이 없다는 것입니다.</strong></span> 따라서 return이 필요하지 않다면 map보다는 forEach를 사용하는 것이 적절합니다. 가장 대표적인 사례는 변경 사항이 반영된 새 배열의 리턴이 필요하냐 아니냐일 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\noriginalArray<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  newArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6, 8]</span></code></pre></div>\n<p>forEach를 사용한 위의 코드는 map을 사용하여 다음과 같이 작성할 수 있습니다. forEach를 사용할 때에는 새 배열을 만들어주고 요소들을 각각 변환해서 새 배열에 넣어줘야 하지만 map은 이를 자동으로 해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>originalArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 1, 2, 3, 4 ]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 2, 4, 6, 8 ]</span></code></pre></div>\n<h3 id=\"-filter\" style=\"position:relative;\"><a href=\"#-filter\" aria-label=\" filter permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 filter</h3>\n<p>filter는 map처럼 새로운 배열을 만들어 그 안에 결과값을 담는다는 공통점이 있지만 다음의 차이점을 보입니다.</p>\n<p>filter는 조건에 만족하는 요소들만을 담은 새로운 배열을 반환하는 것이기 때문에 원본 배열에 비하면 <span style=\"color:hotpink;\"><strong>length가 적어질 수 밖에 없습니다.</strong></span> 반면 map은 length에 있어서는 전혀 변화가 없습니다. 따라서 만일 array의 요소를 삭제할 목적이라면 map보다는 filter를 사용하는 것이 적합합니다.</p>\n<p>filter는 map으로 배열의 요소를 변환시키기 전에 요소들을 사전 필터링하는 용도로 활용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//위의 배열에 다음 map 메소드를 실행하면</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//undefined은 숫자가 아니기 때문에 2를 곱했을 때 NaN이 반환됩니다.</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, NaN, 6]</span></code></pre></div>\n<p>위의 코드처럼 필터링을 하지 않았더니 새로운 배열에 NaN이 포함되었습니다. NaN 때문에 추후 활용에 어려움을 겪을 수 있습니다. 아래와 같이 필터링을 하여 NaN을 사전에 차단합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray\n  <span class=\"token comment\">//filter를 통해 숫자가 아닌 요소를 먼저 제거합니다</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//그 후에 map 메소드를 실행합니다.</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//이제 NaN이 나오지 않게 됩니다</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6]</span></code></pre></div>\n<ul>\n<li>위와 같은 모습으로 여러 메소드를 함께 사용하는 것을 <a href=\"https://velog.io/@1703979/TIL-18-Array-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%97%B0%EC%8A%B5#q10-make-a-string-containing-all-the-scores\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수적 프로그래밍</a>이라고 합니다.</li>\n</ul>\n<h3 id=\"-reduce\" style=\"position:relative;\"><a href=\"#-reduce\" aria-label=\" reduce permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 reduce</h3>\n<p><code class=\"language-text\">Array.reduce(callback[, initialValue])</code></p>\n<p>reduce 메소드는 배열의 각 요소에 대해 콜백 함수(<code class=\"language-text\">reducer</code>이라고 부릅니다)를 실행하여 그 결과를 반환합니다.</p>\n<p>콜백 함수가 반환하는 값은 accumulator에 할당되는데 accumulator는 콜백의 반환값을 누적합니다. 때문에 최종적으로 reduce 메소드가 반환하는 accumulator는 <span style=\"color:hotpink;\"><strong>하나의 값</strong></span>입니다.</p>\n<p>새로운 <span style=\"color:hotpink;\"><strong>배열</strong></span>을 만들 때 reduce 메소드를 map 메소드처럼 사용할 수도 있습니다. 물론 권장하지는 않는데, map에 비해 다음과 같이 복잡하기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  accumulator<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6, 8, 10]</span></code></pre></div>\n<p>위의 코드는 map을 사용하면 아래와 같이 더 간단하게 작성할 수 있습니다. map은 우리가 각 요소를 어떻게 변환할 것인지만 적어주면 되기 때문에 훨씬 깔끔하고 가독성이 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 4, 6, 8, 10]</span></code></pre></div>\n<p>그러나 배열을 새로운 <span style=\"color:hotpink;\"><strong>객체</strong></span>로 만들 때에는 map보다 reduce가 효과적입니다. reduce는 반환 값을 자유롭게 지정할 수 있기 때문입니다. 첫번째 인자인 콜백 다음의 두번째 인자인 <code class=\"language-text\">initialValue</code>를 통해 지정할 수 있습니다. 다음의 코드는 return의 shape을 <code class=\"language-text\">{}</code>로 지정했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//array의 string들을 object의 key로</span>\n  accumulator<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { a: true, b: true, c: true, d: true }</span></code></pre></div>\n<p>결론적으로 기존 배열에서 바뀐 값들로 이루어진 새로운 배열을 만들고자 한다면 map을, 기존 배열을 객체 등 다른 것으로 리턴하고 싶다면 reduce를 사용합니다.</p>\n<h3 id=\"-reverse\" style=\"position:relative;\"><a href=\"#-reverse\" aria-label=\" reverse permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 reverse</h3>\n<p>map은 immutable이지만 reverse는 mutable입니다. 즉, reverse 메소드는 원본을 변경시킵니다. 그렇기 때문에 <span style=\"color:hotpink;\"><strong>map과 reverse를 함께 사용하고자 한다면 map을 먼저 실행</strong></span>해야 합니다.</p>\n<p>단순히 reverse만 사용하고자 하면 map은 필요가 없습니다. 또, reverse 사용시 원본 배열과 분리하여 새롭게 만들고자 할 때도 map 대신 slice 메소드를 활용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [5, 4, 3, 2, 1]</span></code></pre></div>\n<h2 id=\"-map의-복잡한-활용\" style=\"position:relative;\"><a href=\"#-map%EC%9D%98-%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%99%9C%EC%9A%A9\" aria-label=\" map의 복잡한 활용 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 map의 복잡한 활용</h2>\n<p>map 메소드는 굉장히 활용도가 높습니다. 배열의 모든 요소에 1씩 더하는 것과 같은 간단한 작업 뿐만 아니라, 다음과 같은 조금 더 복잡한 일을 할 수 있습니다.</p>\n<h3 id=\"-객체-value-추출\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4-value-%EC%B6%94%EC%B6%9C\" aria-label=\" 객체 value 추출 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 객체 value 추출</h3>\n<p>객체로 이루어진 배열을 string으로 이루어진 배열로 변형시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'first'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'second'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token string\">'third'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span>\n  <span class=\"token comment\">//배열안의 각 객체에서 b키의 값을 가져와 새로운 배열로 반환</span>\n  originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> object<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['first', 'second', 'third']</span></code></pre></div>\n<h3 id=\"-객체-내부-순회\" style=\"position:relative;\"><a href=\"#-%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B6%80-%EC%88%9C%ED%9A%8C\" aria-label=\" 객체 내부 순회 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 객체 내부 순회</h3>\n<p>map 메소드는 array 메소드이기 때문에 객체에 직접적으로 사용할 수는 없습니다. 따라서 <code class=\"language-text\">Object.entries()</code>를 통해 객체를 배열로 나타낸 후 map 메소드를 사용합니다.</p>\n<p>우선 <code class=\"language-text\">Object.entries()</code>를 통해 객체를 배열로 나타내겠습니다. <code class=\"language-text\">Object.entries()</code>를 사용하면 새로운 배열이 만들어지는데 원본 객체에는 영향을 주지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [['a', 1], ['b', 2], ['c', 3]]</span></code></pre></div>\n<p>객체가 배열이 되었으므로 이제 얼마든지 map 메소드를 사용하여 변형시킬 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">//가독성을 위해 구조 분해 할당 구문으로 표현했습니다.</span>\n  <span class=\"token comment\">//key는 바뀌지 않지만 value는 2배가 됩니다.</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [['a', 2], ['b', 4], ['c', 6]]</span></code></pre></div>\n<p>원하는대로 변형이 끝난 후 다시 객체로 되돌려놓고 싶습니다. 위에서 보았던 reduce 메소드를 통해 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> newObject <span class=\"token operator\">=</span> newArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  accumulator<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 2, b: 4, c: 6 }</span></code></pre></div>\n<p>이렇게 원본 객체인 <code class=\"language-text\">object</code>을 변형시키지 않은 채로 value를 변형시킨 새로운 객체를 만들 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ a: 2, b: 4, c: 6 }</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ a: 1, b: 2, c: 3 }</span></code></pre></div>\n<p>전체코드는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newObject <span class=\"token operator\">=</span> newArray<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  accumulator<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드는 map을 사용하지 않고 아래와 같이 reduce나 forEach만으로도 작성할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//1. reduce를 사용</span>\n<span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> entries <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newObject <span class=\"token operator\">=</span> entries<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  accumulator<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> accumulator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//{ a: 2, b: 4, c: 6 }</span>\n\n<span class=\"token comment\">// 2. forEach를 사용</span>\n<span class=\"token keyword\">const</span> newObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nentries<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  newObject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { a: 2, b: 4, c: 6 }</span></code></pre></div>\n<h3 id=\"-조건-적용하기\" style=\"position:relative;\"><a href=\"#-%EC%A1%B0%EA%B1%B4-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" 조건 적용하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 조건 적용하기</h3>\n<p>배열의 요소들을 map 메소드로 변경할 때 조건을 적용할 수 있습니다. <span style=\"color:hotpink;\"><strong>주의할 점은 변경점이 없을 값들의 return도 확인해줘야 한다는 것</strong></span>입니다.</p>\n<p>조건에 맞는 배열의 요소들만 변경시킬 수도 있고,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  number <span class=\"token operator\">>=</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [5, 20, 30, 40]</span></code></pre></div>\n<p>하나의 특정 요소만 변경시킬 수도 있습니다. 모두 조건을 어떻게 주냐에 달려있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  number <span class=\"token operator\">===</span> <span class=\"token number\">10</span> <span class=\"token operator\">?</span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [5, 20, 15, 20]</span></code></pre></div>\n<h3 id=\"-배열-안의-배열에-적용하기\" style=\"position:relative;\"><a href=\"#-%EB%B0%B0%EC%97%B4-%EC%95%88%EC%9D%98-%EB%B0%B0%EC%97%B4%EC%97%90-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\" 배열 안의 배열에 적용하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 배열 안의 배열에 적용하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 생긴, 배열 안에 배열이 있는 형태를 흔히 볼 수 있습니다. 이 경우, map 메소드를 일반적인 형태로 사용한다면 겉의 배열만 다루게 됩니다. 즉, map 메소드는 <code class=\"language-text\">[1, 2, 3]</code>, <code class=\"language-text\">[4, 5, 6]</code>, <code class=\"language-text\">[7, 8, 9]</code> 이렇게 세 가지 요소를 가져옵니다.</p>\n<p>저 세 가지 내부 배열에 map을 적용하고 싶다면 다음과같이 map을 중첩해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> myArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  <span class=\"token comment\">//`[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`에 각각 map을 또 적용</span>\n  value<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [[2, 4, 6], [8, 10, 12], [14, 16, 18]]</span></code></pre></div>\n<h2 id=\"-map-디버깅\" style=\"position:relative;\"><a href=\"#-map-%EB%94%94%EB%B2%84%EA%B9%85\" aria-label=\" map 디버깅 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌳 map 디버깅</h2>\n<p>map 메소드에는 크게 두 가지의 위험(버그)이 기다리고 있습니다.</p>\n<h3 id=\"-map-is-not-a-function\" style=\"position:relative;\"><a href=\"#-map-is-not-a-function\" aria-label=\" map is not a function permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 <code class=\"language-text\">map is not a function</code></h3>\n<p><code class=\"language-text\">map is not a function</code>은 가장 흔한 버그입니다. 객체나 null, 혹은 array가 아닌 어떤 것에라도 map 메소드를 사용하면 이런 에러를 볼 수 있습니다.</p>\n<p>특히, 본인이 마주할 데이터가 어떤 것인지 정확하게 확신할 수 없는 상황에서 이런 에러를 자주 마주하게 됩니다. 예를들어, API에서 응답을 받아오는 상황 등이 있습니다.</p>\n<p>이를 해결할 수 있는 trick은 <code class=\"language-text\">(originalArray || [])</code>을 추가하는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// originalArray could either be [1, 2, 3, 4] or null</span>\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>originalArray <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> number <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">||</code>은 <strong>첫번째</strong> <code class=\"language-text\">true</code>값이나 truthy값을 반환합니다. 만일 모두 <code class=\"language-text\">false</code>로 판단되는 경우 가장 마지막 표현이 리턴됩니다. 트릭에 대한 보다 자세한 설명은 <a href=\"https://medium.com/@bretcameron/12-javascript-tricks-you-wont-find-in-most-tutorials-a9c9331f169d\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이곳</a>을 참고하세요.</p>\n<p>null은 falsy값이기 때문에 API로부터 전달받은 <code class=\"language-text\">originalArray</code>가 null이라면 가장 마지막 표현인 <code class=\"language-text\">[]</code>가 리턴되고, <code class=\"language-text\">[].map();</code>이 실행됩니다. 결국 null이더라도 빈 배열은 반환되게 됩니다. 이렇게 하면 null에 대응할 수 있습니다.</p>\n<p>마찬가지로 <code class=\"language-text\">originalArray</code>가 null이 아니라면 첫번째 <code class=\"language-text\">true</code>인 <code class=\"language-text\">originalArray</code>가 리턴되어 <code class=\"language-text\">originalArray.map();</code>이 실행됩니다.</p>\n<p>단, 이 방법은 객체나 string, non-falsy 아이템에는 사용할 수 없습니다.</p>\n<h3 id=\"-logging-values-inside-of-map\" style=\"position:relative;\"><a href=\"#-logging-values-inside-of-map\" aria-label=\" logging values inside of map permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🌱 Logging values inside of map</h3>\n<p>map 메소드를 통해 배열의 각 요소에 변화를 주기 전, 각 요소가 어떤 상황인지 파악하기 위해서 <code class=\"language-text\">console.log(value)</code>를 찍을 수 있습니다. 이것으로 변경 전의 <code class=\"language-text\">value</code>를 확인할 수 있습니다. 이것을 map 안에 작성하기 위해서는 <code class=\"language-text\">{}</code>으로 묶어주어야 하고, <code class=\"language-text\">{}</code>으로 묶었으니 return도 해줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이런 코드는 나중에 어떤 이슈에 대해 디버깅을 깊게 할 상황에서는 살짝 복잡하게 느껴지기도 합니다. 위에서 사용했던 <code class=\"language-text\">||</code> 트릭을 사용하여 보다 간단하게 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> originalArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> newArray <span class=\"token operator\">=</span> originalArray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* 콘솔에 아래와 같이 찍힙니다.\n1\n2\n3\n*/</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[ 2, 4, 6 ]</span></code></pre></div>\n<p>이런 트릭이 가능한 이유는 <code class=\"language-text\">console.log</code>가 기본적으로 undefined를 리턴하기 때문입니다. undefined는 null처럼 falsy 값이기 때문에 마지막 표현인 <code class=\"language-text\">value * 2</code>가 실행됩니다. 하지만 <code class=\"language-text\">console.log</code>의 리턴값과는 별개로, value를 콘솔에 찍어주는 것은 진행됩니다.</p>","fields":{"slug":"/array-map/"},"frontmatter":{"title":"번역 - Array map을 깊게 파보자","date":"2021-04-15","lastUpdated":"2021-04-15","description":"이 글의 내용은 BENJAMIN JOHNSON의 Deep Dive into JavaScript's Array Map Method를 기반으로 작성되었습니다. 사실상 번역글.","tags":["Javascript"]}},"previous":null,"next":{"fields":{"slug":"/211215/"},"frontmatter":{"title":"바닐라 자바스크립트로 SPA 구현해보기"}}},"pageContext":{"id":"459ace49-3128-57b3-9379-1c45a9fd5b60","previousPostId":null,"nextPostId":"ab6e2a07-3b30-5fad-a072-687fbb5d7cc1","ogImage":"public/og-image/array-map/index.png"}},"staticQueryHashes":["2260143708","984448874"]}