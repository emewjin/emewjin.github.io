{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/playwright-wiki/","result":{"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io","thumbnail":"/thumbnails/zzal.jpg"}},"markdownRemark":{"id":"cc71fb28-0c10-5621-a2a6-5c0941d059c5","tableOfContents":"<ul>\n<li><a href=\"#page-url%EC%9D%B4-%EB%B3%B4%EC%9E%A5%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%98%84%EC%83%81\">page url이 보장이 되지 않는 현상</a></li>\n<li><a href=\"#page%EC%99%80-locator%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">page와 locator의 차이점</a></li>\n<li><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\">컴포넌트 테스트</a></li>\n</ul>","excerpt":"page url이 보장이 되지 않는 현상 아래와 같은 테스트를 작성시 간헐적으로  이 필터 클릭 결과가 반영되지 않은 url, 즉 이벤트 발생 이전의 url…","html":"<h2 id=\"page-url이-보장이-되지-않는-현상\" style=\"position:relative;\"><a href=\"#page-url%EC%9D%B4-%EB%B3%B4%EC%9E%A5%EC%9D%B4-%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%ED%98%84%EC%83%81\" aria-label=\"page url이 보장이 되지 않는 현상 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>page url이 보장이 되지 않는 현상</h2>\n<p>아래와 같은 테스트를 작성시 간헐적으로 <code class=\"language-text\">currentUrl</code> 이 필터 클릭 결과가 반영되지 않은 url, 즉 <strong>이벤트 발생 이전의 url</strong>로 잡히는 경우가 있었다. 그래서 테스트가 깨질 때도 있고 안 깨질 때도 있었는데 이 현상은 병렬로 돌리는 테스트의 수가 늘어날 수록 더 심해졌다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'지역 선택시 기존 필터를 유지한다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  page<span class=\"token punctuation\">,</span>\n  regionFilter<span class=\"token punctuation\">,</span>\n  seoulFilter<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/positions?job=BACKEND_DEVELOPER&amp;jobGroup=DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> regionFilter<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> seoulFilter<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> currentUrl <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> search <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">(</span>currentUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> queryObject <span class=\"token operator\">=</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>queryObject<span class=\"token punctuation\">.</span>addressRegion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SEOUL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>queryObject<span class=\"token punctuation\">.</span>jobGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>queryObject<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BACKEND_DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 문제는 아래와 같이 <code class=\"language-text\">expect</code> 의 <code class=\"language-text\">toHaveURL</code> 메서드를 이용할 경우 순서가 보장되어 해결할 수 있었지만, url을 문자열로 통째로 넘겨야 하기 때문에 테스트를 유지보수하기도 어렵고 가독성도 안 좋아진다는 단점이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'지역 선택시 기존 필터를 유지한다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  page<span class=\"token punctuation\">,</span>\n  regionFilter<span class=\"token punctuation\">,</span>\n  seoulFilter<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/positions?job=BACKEND_DEVELOPER&amp;jobGroup=DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> regionFilter<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> seoulFilter<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveURL</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'http://localhost:4010/positions?addressRegion=SEOUL&amp;job=BACKEND_DEVELOPER&amp;jobGroup=DEVELOPER&amp;pageNumber=1'</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 하지 않고 url을 파싱해서 쓰기 위해, <code class=\"language-text\">page.url</code>이 현재의 url을 반환하는 것을 보장할 필요가 있다. 아래는 참고한 글이다.</p>\n<ul>\n<li><a href=\"https://github.com/microsoft/playwright/issues/4684\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/microsoft/playwright/issues/4684</a></li>\n<li><a href=\"https://stackoverflow.com/questions/68488352/using-playwright-page-url-is-getting-a-previous-url-instead-of-the-current-ur\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/68488352/using-playwright-page-url-is-getting-a-previous-url-instead-of-the-current-ur</a></li>\n</ul>\n<p>공식문서에 관련해 활용할 수 있는 다양한 <code class=\"language-text\">waitFor</code> 함수들을 제공한다. 용도에 맞게 쓰면 되는데, 그중에서 내가 사용한 것은 <code class=\"language-text\">page.waitForNavigation([options])</code> 이었다. 이름 그대로의 역할을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'지역 선택시 기존 필터를 유지한다'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  page<span class=\"token punctuation\">,</span>\n  regionFilter<span class=\"token punctuation\">,</span>\n  seoulFilter<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">goto</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/positions?job=BACKEND_DEVELOPER&amp;jobGroup=DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> regionFilter<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> seoulFilter<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">waitForNavigation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> addressRegion<span class=\"token punctuation\">,</span> jobGroup<span class=\"token punctuation\">,</span> job <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">parseSearch</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>addressRegion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SEOUL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>jobGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'BACKEND_DEVELOPER'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"page와-locator의-차이점\" style=\"position:relative;\"><a href=\"#page%EC%99%80-locator%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"page와 locator의 차이점 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>page와 locator의 차이점</h2>\n<p>공식문서를 바탕으로 테스트를 짜다보니 <code class=\"language-text\">page.locator().click()</code> 과 <code class=\"language-text\">page.click()</code>의 차이점이 궁금해졌다. 그리고 이에 대한 답을 <a href=\"https://github.com/microsoft/playwright/discussions/13649\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">깃허브 디스커션</a>에서 발견할 수 있었다.</p>\n<p><strong>locator를 이용해 특정한 요소는 재사용이 가능하지만 page를 이용한 것은 그렇지 않다는 것이다.</strong></p>\n<p>즉, <code class=\"language-text\">page.locator(sel).click()</code>과 <code class=\"language-text\">page.click(sel)</code> 는 완전히 동일하지만 재사용이 가능하냐 아니냐만 다르다. locator를 이용해서 해당 요소를 재사용하지 않을 거라면 타이핑 해야 하는 코드양이 더 적은 후자를 사용하는 것이 낫다. 반면 미리 정의한 locator가 있다면 <code class=\"language-text\">page.locator().click()</code>을 쓰는 것이 재사용성을 위해 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">locator</span><span class=\"token punctuation\">(</span><span class=\"token string\">'main button[name=\"직군 개발\"]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// locator를 이용해서 특정 요소를 선택하고, 여러 method에 재사용할 수 있음</span>\n<span class=\"token keyword\">await</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">await</span> button<span class=\"token punctuation\">.</span><span class=\"token function\">hover</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"컴포넌트-테스트\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"컴포넌트 테스트 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴포넌트 테스트</h2>\n<p>이제 playwright에서 컴포넌트 테스트를 지원한다는 소식을 접했다.\n<img src=\"https://user-images.githubusercontent.com/76927618/170854817-ca21c54c-5d9a-4516-9a0b-6f409c588ab2.png\" alt=\"image\"></p>\n<p>기존에 컴포넌트 테스트는 RTL로 작성했기 때문에 cypress와 비교할 건 아니다. RTL로 작성된 테스트와 비교했을 때 속도가 더 느리지만 않는다면 e2e도 컴포넌트 테스트도 모두 playwright 하나로 해결할 수 있다는 점이 끌렸다. playwright 문법에만 익숙해지면 되니까.</p>\n<p>그래서 아주 간단하게 동일한 컴포넌트 테스트를 RTL, playwright로 짜서 비교해보았는데 속도차이가 없었다. 다만 이 부분도 테스트가 너무 간단해서 그럴 수 있어 대규모 spec에서도 차이가 없는지 확인이 필요하다.</p>\n<p>속도보다도 더 중요한 부분을 발견했는데, playwright의 컴포넌트 테스트가 아직 실험적 기능이다보니 아주 간단한 테스트를 작성하던 중에도 버그를 발견하는 등 불안정한 것 같단 생각이 들었다. 발견한 버그는 이슈리포팅(<a href=\"https://github.com/microsoft/playwright/issues/14339\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/microsoft/playwright/issues/14339</a>) 했고, 다음 버전에서 수정 예정인듯.</p>\n<ol>\n<li>tailwind의 [] 표현 (arbitrary value)이 사용된 컴포넌트 테스트시 에러나는 점</li>\n<li>React의 fragment를 인지하지 못해 에러나는 점 (div로 바꿔주어야 했음)</li>\n</ol>\n<p>따라서 당장 활용은 불가능할거 같고 stable될 때까지 좀 더 지켜보기로 했다.</p>","fields":{"slug":"/playwright-wiki/"},"frontmatter":{"title":"playwright 위키","date":"2022-05-29","lastUpdated":"2022-06-11","description":"playwright를 이용해 테스트를 작성하며 마주한 이슈나 새로 알게된 점들을 기록한다.","tags":["TestCode","Playwright"],"thumbnail":null}},"previous":{"fields":{"slug":"/thinking-log/"},"frontmatter":{"title":"비로소 알게 된 것들.log"}},"next":{"fields":{"slug":"/playwright-vs-cypress/"},"frontmatter":{"title":"playwright는 진짜 cypress보다 빠를까?"}}},"pageContext":{"id":"cc71fb28-0c10-5621-a2a6-5c0941d059c5","previousPostId":"c4818fc5-4188-5bff-a3f6-a536f95457fa","nextPostId":"b1947498-edd9-55d9-ad55-50125547dc0d"}},"staticQueryHashes":["2260143708","658623446","984448874"]}