{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/why-not-fc/",
    "result": {"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io","thumbnail":"/thumbnails/zzal.jpg"}},"markdownRemark":{"id":"0e2c0d7f-0699-575f-8530-a51bf73e37cf","tableOfContents":"<ul>\n<li>\n<p><a href=\"#fc%EB%A5%BC-%EC%93%B0%EC%A7%80-%EB%A7%90%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">FC를 쓰지 말아야 하는 이유</a></p>\n<ul>\n<li><a href=\"#1-children%EC%9D%84-%EC%95%94%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\">1. children을 암시적으로 가지고 있습니다.</a></li>\n<li><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\">2. 제네릭을 지원하지 않습니다.</a></li>\n<li><a href=\"#3-%EB%84%A4%EC%9E%84-%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C-%EB%8D%94-%EB%B6%88%ED%8E%B8%ED%95%A9%EB%8B%88%EB%8B%A4\">3. 네임 스페이스 패턴을 이용할 때 더 불편합니다.</a></li>\n<li><a href=\"#4-fc%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%BD%94%EB%93%9C%EA%B0%80-%EB%8D%94-%EA%B8%B8%EC%96%B4%EC%A7%91%EB%8B%88%EB%8B%A4\">4. FC를 이용하면 코드가 더 길어집니다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EA%B5%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-18-%EC%9D%B4%EC%83%81%EC%97%90%EC%84%9C-%EC%97%86%EC%96%B4%EC%A1%8C%EC%8A%B5%EB%8B%88%EB%8B%A4\">결국 리액트 18 이상에서 없어졌습니다.</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%AC%B8%EC%84%9C\">참고문서</a></p>\n</li>\n</ul>","excerpt":"⚠️ 리액트 1…","html":"<blockquote>\n<p>⚠️ 리액트 17 이하 버전에서 유효한 내용입니다.</p>\n</blockquote>\n<p>개인적으로 타입스크립트로 리액트 컴포넌트를 작성할 때 가장 많이 사용하는 방법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyComponentProps</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComponent<span class=\"token operator\">:</span> <span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>MyComponentProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 표현식과 <code class=\"language-text\">FC</code> 조합으로 컴포넌트를 작성하는 데에 별 다른 이유가 있었던 것은 아닙니다.<br>\n그냥 익숙해졌고, 별다른 불편함이 없으니 쓰던대로 계속 썼다가 맞습니다.<br>\n나름대로는 <code class=\"language-text\">FC</code> 에 <code class=\"language-text\">children</code>이 포함되어 있으니 편리하다고 느끼기도 했습니다.</p>\n<p>그러다 최근 리액트 컴포넌트의 표현식과 선언식은 단순히 취향차이일까? 하는 생각에서 시작해 알아보다가 그동안 무지성으로 <code class=\"language-text\">FC</code>를 사용한 것을 반성하게 되었습니다.</p>\n<blockquote>\n<p>리액트 컴포넌트의 표현식 vs 선언식에서 갑자기 <code class=\"language-text\">FC</code>로 주제가 튄 이유는 선언식은 <code class=\"language-text\">FC</code>를 사용하지 못하기 때문입니다. (<code class=\"language-text\">FC</code>는 말 그대로 함수에 대한 타입 정의이기 때문에 선언식에선 사용할 수 없습니다) <code class=\"language-text\">FC</code>를 사용하지 못하는게 큰 단점일까?를 생각하다가 여기까지 오게 되었죠.</p>\n</blockquote>\n<h2 id=\"fc를-쓰지-말아야-하는-이유\" style=\"position:relative;\"><a href=\"#fc%EB%A5%BC-%EC%93%B0%EC%A7%80-%EB%A7%90%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"fc를 쓰지 말아야 하는 이유 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FC를 쓰지 말아야 하는 이유</h2>\n<p>React Typescript에서 <code class=\"language-text\">FC</code>는 비기너라면 몰라도, 그다지 좋은 방법(best practice)이 아닙니다.<br>\n가장 큰 이유는 props에 children이 암시적으로 들어가 있기 때문이라고 생각합니다.<br>\nCRA에서는 기본 템플릿에 <code class=\"language-text\">FC</code>를 빼야한다는 PR(<a href=\"https://github.com/facebook/create-react-app/pull/8177\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/facebook/create-react-app/pull/8177</a>) 이 올라왔었고, 반영되었습니다.</p>\n<p>지금부터 작성할 내용은 위 PR에서 주장한 내용들을 번역(의역)한 것입니다.</p>\n<blockquote>\n<p>대부분이 함수 컴포넌트를 사용하는 요즘에 적합하지 않은 이유(defaultProps)는 제외했습니다</p>\n</blockquote>\n<h3 id=\"1-children을-암시적으로-가지고-있습니다\" style=\"position:relative;\"><a href=\"#1-children%EC%9D%84-%EC%95%94%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"1 children을 암시적으로 가지고 있습니다 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. children을 암시적으로 가지고 있습니다.</h3>\n<p><code class=\"language-text\">FC</code>를 이용하면 컴포넌트 props는 type이 <code class=\"language-text\">ReactNode</code>인 <code class=\"language-text\">children</code>을 <strong>암시적으로</strong> 가지게 됩니다.<br>\n이는 꼭 타입스크립트에 한정하지 않더라도 안티패턴입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">hi</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Unwanted children</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">App</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드를 보면 <code class=\"language-text\">&lt;App/></code> 컴포넌트에서 <strong><code class=\"language-text\">children</code>을 다루고 있지 않음에도</strong> <code class=\"language-text\">Example</code>에서 <code class=\"language-text\">children</code>을 넘겨주고 있으며, 어떤 런타임 에러도 발생하지 않습니다.</p>\n<p>이런 실수는 <code class=\"language-text\">FC</code>를 사용하지 않는다면 잡아낼 수 있습니다.</p>\n<blockquote>\n<p>물론 FC를 사용한다면 자주 사용하는 children의 타입을 하나하나 작성해주지 않아도 된다는 편리함이 있습니다. FC를 사용하지 않는다면 구체적으로 타입을 작성해주어야 하겠죠. 귀찮긴 하지만 타입스크립트의 사용 목적을 생각해보면 따르지 않을 이유가 없습니다.</p>\n</blockquote>\n<h3 id=\"2-제네릭을-지원하지-않습니다\" style=\"position:relative;\"><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"2 제네릭을 지원하지 않습니다 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 제네릭을 지원하지 않습니다.</h3>\n<p>가끔 다음과 같은 제네릭 컴포넌트를 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GenericComponentProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> GenericComponent <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> GenericComponentProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*...*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그러나 이런 형태는 <code class=\"language-text\">FC</code>에서 허용되지 않습니다. 왜냐하면 <code class=\"language-text\">T</code>를 넘겨줄 방법이 없기 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> GenericComponent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span><span class=\"token comment\">/* ??? */</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">(props: GenericComponentProps&lt;T>) => </span><span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-네임-스페이스-패턴을-이용할-때-더-불편합니다\" style=\"position:relative;\"><a href=\"#3-%EB%84%A4%EC%9E%84-%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%A0-%EB%95%8C-%EB%8D%94-%EB%B6%88%ED%8E%B8%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"3 네임 스페이스 패턴을 이용할 때 더 불편합니다 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 네임 스페이스 패턴을 이용할 때 더 불편합니다.</h3>\n<p>다음과 같이 연관성 있는 컴포넌트에 대해 네임 스페이스 패턴을 적용하는 것은 매우 많이 쓰이는 방법입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Select</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Select.Item</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Select</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">FC</code>를 쓰고도 이 패턴을 적용할 수 있긴 하지만, <strong>많이 불편해집니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// FC를 사용할 때</span>\n<span class=\"token keyword\">const</span> Select<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>SelectProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> Item<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>ItemProps<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  props\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nSelect<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Item</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*...*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// FC를 사용하지 않을 때</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Select</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> SelectProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ... */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nSelect<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">Item</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> ItemProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/*...*/</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"4-fc를-이용하면-코드가-더-길어집니다\" style=\"position:relative;\"><a href=\"#4-fc%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%BD%94%EB%93%9C%EA%B0%80-%EB%8D%94-%EA%B8%B8%EC%96%B4%EC%A7%91%EB%8B%88%EB%8B%A4\" aria-label=\"4 fc를 이용하면 코드가 더 길어집니다 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. FC를 이용하면 코드가 더 길어집니다.</h3>\n<p>큰 단점은 아니지만, 어쨌든 그렇습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token constant\">C1</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>CProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">C2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> CProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"결국-리액트-18-이상에서-없어졌습니다\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B5%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-18-%EC%9D%B4%EC%83%81%EC%97%90%EC%84%9C-%EC%97%86%EC%96%B4%EC%A1%8C%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"결국 리액트 18 이상에서 없어졌습니다 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결국 리액트 18 이상에서 없어졌습니다.</h2>\n<blockquote>\n<p>친절하신 댓글 제보로 내용을 추가합니다.</p>\n</blockquote>\n<p>리액트 18 업데이트로, FC의 암시적인 children이 삭제되었습니다. 해당 변경 사항은 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/pull/56210\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 PR</a>에서 확인할 수 있습니다.</p>\n<p>아직 리액트 17을 쓰고 있지만 라이브러리 몇 가지만 업데이트 되면 18로 업데이트할 예정이라, 지금부터 틈틈이 FC의 암시적인 children을 사용하는 코드들을 정리해야겠습니다. 🤧</p>\n<h2 id=\"참고문서\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%AC%B8%EC%84%9C\" aria-label=\"참고문서 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고문서</h2>\n<ul>\n<li><a href=\"https://medium.com/raccoons-group/why-you-probably-shouldnt-use-react-fc-to-type-your-react-components-37ca1243dd13\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Why you probably shouldn’t use React.FC to type your React components</a></li>\n<li><a href=\"https://github.com/facebook/create-react-app/pull/8177\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Remove React.FC from Typescript template</a></li>\n<li><a href=\"https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeScript + React: Why I don’t use React.FC</a></li>\n</ul>","fields":{"slug":"/why-not-fc/"},"frontmatter":{"title":"리액트에서 FC를 사용하지 말아야 하는 이유","date":"2022-07-31","lastUpdated":"2022-08-09","description":"무지성 FC 사용에서 벗어나기","tags":["Typescript","React"],"thumbnail":null}},"previous":{"fields":{"slug":"/vsc-react-ts-tips/"},"frontmatter":{"title":"vsc에서 리액트 컴포넌트 작성을 위한 타이핑을 최소화하기"}},"next":{"fields":{"slug":"/storybook/"},"frontmatter":{"title":""}}},"pageContext":{"id":"0e2c0d7f-0699-575f-8530-a51bf73e37cf","previousPostId":"a5ecaf61-1800-5ffb-9d62-935946067464","nextPostId":"6b4355e4-ba1f-5b58-b176-26c60577d70b"}},
    "staticQueryHashes": ["2260143708","658623446","984448874"]}