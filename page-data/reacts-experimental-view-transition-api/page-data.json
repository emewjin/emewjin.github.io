{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/reacts-experimental-view-transition-api/","result":{"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io"}},"markdownRemark":{"id":"80e8e8f8-d7c7-5007-bc36-847653ed7c2a","tableOfContents":"<ul>\n<li><a href=\"#%EB%B7%B0-%ED%8A%B8%EB%9E%9C%EC%A7%80%EC%85%98-101\">뷰 트랜지션 101</a></li>\n<li><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\">시작하기</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\">기본 사용법</a></li>\n<li><a href=\"#%EC%9E%90%EC%8B%9D-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\">자식 전환하기</a></li>\n<li><a href=\"#%EA%B3%B5%EC%9C%A0-%EC%9A%94%EC%86%8C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98\">공유 요소 애니메이션</a></li>\n<li><a href=\"#%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\">애니메이션 커스터마이징</a></li>\n<li><a href=\"#motion%EC%9D%80-%EC%96%B4%EB%94%94%EB%A1%9C-%EA%B0%80%EB%8A%94%EA%B0%80\">Motion은 어디로 가는가?</a></li>\n</ul>","excerpt":"원문: Revealed: React’s experimental animations API 12년(!) 전 처음 출시된 이래로 리액트의 API…","html":"<blockquote>\n<p>원문: <a href=\"https://motion.dev/blog/reacts-experimental-view-transition-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Revealed: React’s experimental animations API</a></p>\n</blockquote>\n<p>12년(!) 전 처음 출시된 이래로 리액트의 API에는 눈에 띄는 애니메이션 공백이 존재했습니다.</p>\n<p>그동안 뷰와 스벨트 같은 가장 가까운 경쟁사들은 광범위하진 않지만 애니메이션을 조금 더 쉽게 만들어주는 API를 도입했습니다. 반면에 리액트 개발자는 <a href=\"https://motion.dev/docs/react-quick-start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Motion for React</a>, <a href=\"https://react-spring.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Spring</a> 등과 같은 써드파티 라이브러리에 의존해야 했습니다.</p>\n<p>그러나 이제 상황이 달라졌습니다.</p>\n<p>리액트가 드디어 첫 번째 애니메이션 API를 도입합니다. 천사들이 노래하고, 하늘이 갈라지고, 긴 어둠의 틈새로 작가 <a href=\"https://bsky.app/profile/sebmarkbage.calyptus.eu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Seb Markbåge</a>가 세상에 새로운 <code class=\"language-text\">&lt;ViewTransition /></code>을 선사합니다. (덧붙여서 이 새로운 API에 대한 많은 질문에 답해주신 Seb에게 감사드립니다.)</p>\n<p><code class=\"language-text\">&lt;ViewTransition /></code>는 그 이름에서 알 수 있듯이 브라우저의 강력한 새로운 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/View_Transition_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">뷰 트랜지션 API</a> 기능을 기반으로 하고 있습니다.</p>\n<p>흥미롭게도, 이미 리액트의 사전 릴리즈 채널에서 사용할 수 있습니다. 따라서 이번 글에서는 오늘날 리액트와 Next.js에서 <code class=\"language-text\">&lt;ViewTransition /></code>을 사용하는 방법을 설명하고, 복사 붙여넣기 가능한 실시간 예제를 통해 그 기능을 탐구해보겠습니다.</p>\n<p>또한, 이러한 예제들을 마음껏 살펴볼 수 있는 <a href=\"https://react-view-transition-examples.motion.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">마이크로사이트</a>도 함께 제공됩니다.</p>\n<p>하지만 제가 너무 앞서갔네요. 우선, 뷰 트랜지션이란 무엇일까요? 그리고 왜 이 기능이 리액트 팀으로 하여금 첫 애니메이션 API를 도입하게 만들었을까요?</p>\n<h2 id=\"뷰-트랜지션-101\" style=\"position:relative;\"><a href=\"#%EB%B7%B0-%ED%8A%B8%EB%9E%9C%EC%A7%80%EC%85%98-101\" aria-label=\"뷰 트랜지션 101 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뷰 트랜지션 101</h2>\n<p>뷰 트랜지션 API는 개발자들이 두 뷰 간의 애니메이션을 구현할 수 있도록 하는 새로운 브라우저 기능입니다.</p>\n<p>이 API는 매우 강력해서 이전에는 애니메이션이 불가능하던 값, 예를 들어 <code class=\"language-text\">justify-content</code>를 <code class=\"language-text\">flex-start</code>에서 <code class=\"language-text\">flex-end</code>로 전환하는 것 같은 동작도 가능합니다.</p>\n<p><a href=\"https://examples.motion.dev/js/view-animation?utm_source=embed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>또는 두 개의 완전히 별개인 요소를 마치 하나인 것처럼 애니메이션 처리하는 것도 가능합니다.</p>\n<p><a href=\"https://examples.motion.dev/js/lightbox?utm_source=embed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>여러모로 앞선 기술이긴 하지만, 뷰 트랜지션은 몇 가지 단점도 존재합니다. 요약하자면, 본질적으로 중단할 수 없고, 가상 요소의 CSS API는 불편하며, 스크롤 위치의 변화에 애니메이션이 적용되고, 독립적으로 애니메이션이 적용되는 모든 요소에 고유한 <code class=\"language-text\">view-transition-name</code>을 할당해야 합니다. 이는 관리가 번거롭고 오류가 발생하기 쉬워 구성을 불필요하게 어렵게 만듭니다.</p>\n<p>이런 문제를 해결하기 위해 최근에 새로운 <a href=\"https://motion.dev/docs/view\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">view()</code> 함수</a>의 알파 버전을 출시했으며, 이는 <a href=\"https://motion.dev/plus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Motion+</a> 초기 액세스에서 사용 가능합니다.</p>\n<p>따라서 여러분은 vanilla JS 사용자들을 위해 이러한 문제를 해결할 수 있다면, 다음 단계로 <code class=\"language-text\">view()</code>를 리액트 래퍼로 옮기는 것은 쉬운 일이라고 생각할 수 있습니다.</p>\n<p>하지만 안타깝게도, 리액트와 통합할 때 <code class=\"language-text\">view()</code>는 뷰 트랜지션 API와 동일한 근본적인 한계를 공유합니다.</p>\n<ol>\n<li>상태를 설정하기 전에 뷰 트랜지션을 시작해야 합니다.</li>\n<li>상태 업데이트를 리액트의 <code class=\"language-text\">flushSync</code>로 감싸야 합니다.\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">view(() => {\n  flushSync(() => setState(yourNewState))\n})</code></pre></div>\n</li>\n</ol>\n<p>이는 성능이 좋지 않은 방법입니다.</p>\n<p>뷰 트랜지션은 본질적으로 요소 자체가 아닌 요소의 <strong>스크린샷</strong>을 포함하는 가상 요소를 애니메이션 처리합니다. 이 과정에는 장단점이 있지만, 결과적으로 페이지의 일부 또는 전체가 시각적으로 정지되고, 애니메이션이 끝날 때까지 정적이고 인터랙티브하지 않은 상태로 유지됩니다.</p>\n<p>따라서 뷰 트랜지션을 시작하기에 가장 적합한 시점은 DOM을 변경하기 직전입니다. 상태 업데이트를 설정하기 전이 아니고, 그 상태 업데이트가 렌더에 이르고, 커밋으로 이어지기 전도 아닙니다.</p>\n<p>더 나쁜 것은, 리액트에서 <code class=\"language-text\">flushSync</code>는 새 상태가 렌더링될 때까지 메인 스레드를 차단하기 때문에 이 상태 업데이트를 수행하는 가장 성능이 낮은 방법입니다. 모든 메인 스레드 애니메이션과 상호작용을 정지시키고, bail-outs이나 취소를 방지합니다.</p>\n<p>이것이 바로 <code class=\"language-text\">&lt;ViewTransition /></code>이 중요한 이유입니다. 이는 리액트 렌더 사이클에 깊숙이 연결되어 있어 가능한 한 늦게 뷰 트랜지션을 트리거할 수 있습니다. 그동안 페이지는 시각적으로 정지되지 않습니다.</p>\n<p>또한, 비동기 업데이트(<code class=\"language-text\">startTransition</code>이나 <code class=\"language-text\">&lt;Suspense /></code> 같은)<strong>에서만</strong> 작동하기 때문에, 상태 업데이트는 애니메이션이 시작되기 전에 중단되거나 취소될 수 있습니다. 결과적으로 UI는 더욱 반응성이 높아집니다.</p>\n<p>와우, 완벽하게 들리죠? 사실상 뷰 트랜지션 API 자체의 본질적인 한계를 제외하면 거의 완벽합니다. 이제 왜 좋은지 이유를 알았으니, 자세히 살펴보겠습니다.</p>\n<h2 id=\"시작하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"시작하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하기</h2>\n<p>먼저 주의하세요! <code class=\"language-text\">&lt;ViewTransition /></code>은 실험적인 API입니다. 예고 없이 언제든지 변경될 수 있습니다 (아마도 변경될 것입니다). 이러한 초기 릴리스의 목적은 API의 버그와 허점을 찾는 데 있습니다. 따라서 재미로 사용해보는 것은 좋지만, 당장 이 API로 프로덕션 코드를 작성하는 것은 권장하지 않습니다.</p>\n<p>즉, 가장 빠르게 시작하는 방법은 이미 리액트가 실험적 채널로 설정된 <a href=\"https://codesandbox.io/p/sandbox/react-viewtransition-component-cxh98w?file=%2Fsrc%2FApp.js%3A10%2C1-13%2C1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이 CodeSandbox를</a> 포크하는 것입니다.</p>\n<p>또한, 여러분의 프로젝트에 이렇게 <code class=\"language-text\">react</code>와 <code class=\"language-text\">react-dom</code>을 설치할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install react@experimental react-dom@experimental</code></pre></div>\n<p>Next.js 사용자라면, 최소 버전이 <code class=\"language-text\">15.2.0-canary.6</code>인 <code class=\"language-text\">canary</code> 버전을 설치해야 합니다. 그 후, <code class=\"language-text\">next.config.js</code> 파일에 다음을 추가하세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> nextConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  experimental<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    viewTransition<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>마지막으로, 불안정한 API인 <code class=\"language-text\">ViewTransition</code>은 <code class=\"language-text\">unstable_ViewTransition</code>으로 내보내집니다. 따라서 다음과 같이 가져올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unstable_ViewTransition <span class=\"token keyword\">as</span> ViewTransition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"기본-사용법\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"기본 사용법 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 사용법</h2>\n<p><code class=\"language-text\">&lt;ViewTransition /></code>이 컴포넌트를 감싸면, 첫 번째 DOM 자식에게 자동으로 <code class=\"language-text\">view-transition-name</code>이 할당됩니다.</p>\n<p>예를 들어, 이 토글은 <code class=\"language-text\">.handle</code> 요소를 <code class=\"language-text\">ViewTransition</code>으로 감싸서 만들어졌습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">justifyContent</span><span class=\"token operator\">:</span> isOn <span class=\"token operator\">?</span> <span class=\"token string\">'flex-end'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'flex-start'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>handle<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/view-transition\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>중요한 점은, <code class=\"language-text\">isOn</code> 상태 업데이트는 <code class=\"language-text\">startTransition</code>으로 감싸야 한다는 것입니다. 그렇지 않으면 애니메이션이 작동하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> toggleOn <span class=\"token operator\">=</span> <span class=\"token function\">startTransition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsOn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isOn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법의 큰 장점은 <code class=\"language-text\">view-transition-name</code>이 자동으로 생성될 뿐만 아니라 <strong>자동으로 적용된다는</strong> 것입니다.</p>\n<p>이게 무슨 의미일까요? 뷰 트랜지션 API에서는 요소에 <code class=\"language-text\">view-transition-name</code>을 설정하고 그저 잊어버릴 수 없습니다. 추가적인 작업 없이 뷰 트랜지션 “타입”으로 알려진 것을 관리하지 않으면, 모든 <code class=\"language-text\">view-transition-name</code>이 있는 요소들이 모든 단일 뷰 트랜지션에 포함됩니다.</p>\n<p>즉, 단순한 접근 방식으로는 이러한 스위치 중 하나를 클릭하면 실제로는 하나만 눈에 띄는 경우에도 다음과 같이 여섯 개의 애니메이션이 실행될 수 있습니다.</p>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/sibling-view-transitions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>그러나 인스펙터를 보면, 이러한 스위치에 대해 단 하나의 애니메이션만 생성되었다는 것을 확인할 수 있습니다.</p>\n<p><img src=\"/f71c64cf6eb90d867bc2a3f1fc809334/view-transtion.avif\" alt=\"\"></p>\n<p><code class=\"language-text\">view-transition-name</code> 스타일이 애니메이션 직전에 적용되고, 애니메이션 직후에 제거되기 때문입니다. 이는 성능 향상과 미세한 상호작용의 분리에 모두 이점이 있습니다. <code class=\"language-text\">name</code> 생성과 적용 사이에서는 이미 뷰 트랜지션 API의 주요 문제점 두 가지를 해결했습니다.</p>\n<p><code class=\"language-text\">&lt;ViewTransition /></code>은 시각적 변화를 감지하는 데 매우 강력합니다. 여기에서는 단순히 <code class=\"language-text\">img</code>의 URL을 변경하기만 하면 이 컴포넌트는 이미지가 한 이미지에서 다음 이미지로 올바르게 전환되도록 합니다.</p>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/crossfade\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<h2 id=\"자식-전환하기\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%8B%9D-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-label=\"자식 전환하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자식 전환하기</h2>\n<p><code class=\"language-text\">view-transition-name</code> 적용의 강력한 면모 중 하나는 요소가 동일할 때만 작동하는 것이 아니라는 점입니다. 두 개의 완전히 다른 요소를 단순히 교체함으로써 교차 페이드할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>state <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MenuA</span></span> <span class=\"token punctuation\">/></span></span> <span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MenuB</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/switch-menu\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>이것은 <code class=\"language-text\">&lt;Suspense /></code> 컴포넌트와도 함께 작동하므로, 대체 UI(fallback)에서 준비된 콘텐츠로 애니메이션을 적용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Suspense</span></span> <span class=\"token attr-name\">fallback</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Skeleton</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Suspense</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>안타깝게도 이 설정의 모의 버전을 작동시키는 데 성공하지 못했습니다. 성공할 경우 이 글을 업데이트하겠습니다.</p>\n<h2 id=\"공유-요소-애니메이션\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%9C%A0-%EC%9A%94%EC%86%8C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98\" aria-label=\"공유 요소 애니메이션 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공유 요소 애니메이션</h2>\n<p>이전 예제에서 밑줄 애니메이션도 보셨나요? 이는 상태에 따라 <code class=\"language-text\">&lt;ViewTransition /></code>을 각 버튼에 조건부로 렌더링하여 수행됩니다. 두 버튼은 일치하는 <code class=\"language-text\">name</code> 프로퍼티를 수동으로 제공하여 연결합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token punctuation\">{</span>\n  isSelected <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewTransition</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>underline<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Underline</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">ViewTransition</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">&lt;ViewTransition /></code>이 한 위치에서 제거되고 다른 곳에 생성되면, 두 요소는 공유 요소가 됩니다.</p>\n<p>이 기능에는 Motion의 <code class=\"language-text\">view()</code> 함수에 그대로 모방하고 싶은 아주 기발한 특징이 있습니다. 이렇게 두 요소가 연결되어 있을 때, 만약 그 중 하나가 화면(뷰포트) 밖에 있다면, 단순한 페이드 애니메이션이 사용됩니다. 이렇게 하면 사용자에게 불필요한 요소가 화면 곳곳을 날아다니는 것을 방지할 수 있습니다.</p>\n<p>이를 보여주기 위해 “Toggle box position”을 눌러 레이아웃 애니메이션을 확인한 다음, “Toggle container size”를 눌러 하단 상자를 화면 밖으로 이동시키고 다시 박스 위치를 토글해 보세요.</p>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/viewport-detection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<h2 id=\"애니메이션-커스터마이징\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95\" aria-label=\"애니메이션 커스터마이징 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애니메이션 커스터마이징</h2>\n<p>지금까지 여러 애니메이션을 만들었지만, 실제로 가속도(easing), 지속 시간(duration), 지연(delay)을 커스터마이즈하진 않았습니다.</p>\n<p><code class=\"language-text\">name</code>을 수동으로 설정하고 뷰 트랜지션 API의 다소 복잡한 가상 선택자를 사용하여 CSS를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ViewTransition</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>photo<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">{`\n    ::view-transition-group(photo),\n    ::view-transition-new(photo),\n    ::view-transition-old(photo) {\n      animation-duration: 1s;\n    }\n  `}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/customise-css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>하지만 컴포넌트의 편리한 이벤트 핸들러를 사용하는 것이 더욱 유용할 것입니다. 다음은 다섯 가지가 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">onEnter</code>/<code class=\"language-text\">onLeave</code>: 이 컴포넌트가 DOM에 들어오거나 나가며, 동일한 <code class=\"language-text\">name</code>을 공유하는 다른 요소가 없습니다.</li>\n<li><code class=\"language-text\">onLayout</code>: 외부 컴포넌트로 인해 이 컴포넌트의 경계가 변경되었습니다.</li>\n<li><code class=\"language-text\">onUpdate</code>: 이 컴포넌트의 내용 또는 경계가 자체 또는 자식 컴포넌트로 인해 변경되었습니다.</li>\n<li><code class=\"language-text\">onShare</code>: 이 컴포넌트가 공유 요소 전환을 수행하고 있습니다.</li>\n</ul>\n<p>각 이벤트 콜백은 애니메이션에서 사용된 각 가상 요소의 참조를 포함하는 <code class=\"language-text\">ViewTransitionInstance</code>를 제공합니다. 이 참조는 미리 바인딩된 Web Animations API 함수를 포함하고 있으며, 이를 사용하여 완전히 사용자 정의된 애니메이션을 만들 수 있습니다.</p>\n<p>따라서 이미지를 교환하는 예제에서 이제 <code class=\"language-text\">direction</code>을 사용하여 이미지를 왼쪽이나 오른쪽으로 동적으로 애니메이션할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">onUpdate</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">:</span> ViewTransitionInstance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token operator\">*</span> direction<span class=\"token punctuation\">;</span>\n\n  instance<span class=\"token punctuation\">.</span>old<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      clipPath<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'none'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token operator\">-</span>offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> duration<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">:</span> <span class=\"token string\">'both'</span><span class=\"token punctuation\">,</span> easing<span class=\"token operator\">:</span> <span class=\"token string\">'ease-in'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  instance<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      transform<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translateX(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>offset<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'none'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> duration<span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> delay<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> fill<span class=\"token operator\">:</span> <span class=\"token string\">'both'</span><span class=\"token punctuation\">,</span> easing<span class=\"token operator\">:</span> <span class=\"token string\">'ease-out'</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/customise-waapi\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>우리는 전형적인 <code class=\"language-text\">opacity</code>/<code class=\"language-text\">transform</code> 애니메이션에 국한되지 않습니다. 여기서는 <code class=\"language-text\">clipPath</code> 애니메이션을 사용하여 마스크를 애니메이션화하고 있습니다.</p>\n<p><a href=\"https://react-view-transition-examples.motion.dev/react/customise-mask\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<h2 id=\"motion은-어디로-가는가\" style=\"position:relative;\"><a href=\"#motion%EC%9D%80-%EC%96%B4%EB%94%94%EB%A1%9C-%EA%B0%80%EB%8A%94%EA%B0%80\" aria-label=\"motion은 어디로 가는가 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Motion은 어디로 가는가?</h2>\n<p>이것이 바로 <code class=\"language-text\">&lt;ViewTransition /></code>입니다. 이것은 확실히 리액트 애니메이션에 많은 새로운 기능을 제공하고, 뷰 트랜지션 API를 원형 형태보다 훨씬 쉽게 사용할 수 있게 해줄 것입니다.</p>\n<p>그러나 뷰 트랜지션 API의 단점 일부를 해결할 뿐입니다. 뷰 트랜지션 자체는 모든 웹 애니메이션에 대한 만능 해결책이 아닙니다. 이는 “단지” 새롭고 놀라운 도구일 뿐이며, CSS 전환, 스크롤 애니메이션 등 다른 놀라운 도구들과 함께 사용할 수 있는 것입니다.</p>\n<p>그러나 Motion for React에는 뷰 트랜지션과 매우 밀접하게 연관된 벤 다이어그램의 겹치는 공간에 위치한 하나의 API가 있는데, 바로 <a href=\"https://motion.dev/docs/react-layout-animations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">레이아웃 애니메이션</a>입니다.</p>\n<p>레이아웃 애니메이션은 불가능한 것을 애니메이션화하는 비슷한 작업을 수행하지만 변형과 스케일 왜곡 보정 계산을 사용합니다. 마이크로 인터랙션의 경우 부분적으로는 스크롤 오프셋을 고려하고 상대적으로/중첩된 애니메이션을 처리하기 때문에 여전히 선호되지만, <strong>대부분 중단할 수 있기</strong> 때문입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>motion.div</span> <span class=\"token attr-name\">layout</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><a href=\"https://examples.motion.dev/react/layout-animation?utm_source=embed\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">라이브 데모 Sandbox</a></p>\n<p>명백한 단점은 약 33kb 크기의 <code class=\"language-text\">motion</code> 비용이 발생한다는 것입니다. 따라서 의심할 여지 없이 더 작은 번들 크기로 동일한 기능을 많이 수행하는 대안이 있다는 것은 좋은 소식입니다.</p>\n<p>더 흥미로운 것은 Motion에서 <code class=\"language-text\">&lt;ViewTransition /></code> 컴포넌트를 생각하고 있다는 것이며, 이는 모든 개발자가 뷰 트랜지션을 더 쉽게 접근할 수 있게 만들 수 있는 방법입니다. 아마도 JS 이징 함수와 스프링을 허용하고 다른 Motion과 마찬가지로 합리적인 기본값을 포함하는 선언적 API가 될 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">AnimateView</span></span> <span class=\"token attr-name\">share</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'spring'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">bounce</span><span class=\"token operator\">:</span> <span class=\"token number\">0.3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>뷰 트랜지션 시작 직전에 실행될 수 있는 <code class=\"language-text\">onRead</code> 같은 이벤트 몇 가지가 더 있다면, <code class=\"language-text\">&lt;ViewTransition /></code>에 대한 <code class=\"language-text\">view()</code>의 예정된 개선 사항 중 일부, 특히 스크롤 위치의 변경을 취소하는 기능을 추가할 수 있을 것입니다.</p>\n<p>그러나 아마도 <code class=\"language-text\">&lt;ViewTransition /></code>이 안정화될 때까지 기다려야 할 것입니다.</p>\n<p>그때까지 리액트의 새로운 애니메이션 API에 대한 여러분의 의견을 <a href=\"https://twitter.com/mattgperry\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">알려주시고</a>, 이를 이용해 무엇을 만드시는지 알려주세요!</p>\n<blockquote>\n<p>🚀 한국어로 된 프런트엔드 아티클을 빠르게 받아보고 싶다면 <a href=\"https://kofearticle.substack.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Korean FE Article</a>을 구독해주세요!</p>\n</blockquote>","fields":{"slug":"/reacts-experimental-view-transition-api/"},"frontmatter":{"title":"(번역) 리액트의 실험적인 애니메이션 API 공개","date":"2025-02-09","lastUpdated":"2025-02-09","description":null,"tags":["React","번역"]}},"previous":{"fields":{"slug":"/react-compiler-performs-on-real-code/"},"frontmatter":{"title":"(번역) 실제 코드에서 리액트 컴파일러의 성능"}},"next":{"fields":{"slug":"/you-should-know-this-before-choosing-nextjs/"},"frontmatter":{"title":"(번역) Next.js를 선택하기 전에 반드시 알아야 할 것들"}}},"pageContext":{"id":"80e8e8f8-d7c7-5007-bc36-847653ed7c2a","previousPostId":"c46c6043-3c5a-5ddb-b947-1a4bb1f01349","nextPostId":"b0d820c8-9b49-51b4-9036-97c1bf3e0828","ogImage":"public/og-image/reacts-experimental-view-transition-api/index.png"}},"staticQueryHashes":["2260143708","984448874"]}