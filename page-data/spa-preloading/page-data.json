{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/spa-preloading/","result":{"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io"}},"markdownRemark":{"id":"afda2d81-bd1d-5c1f-8897-562b376d1616","tableOfContents":"<ul>\n<li><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9A%94%EC%B2%AD-%EB%AF%B8%EB%A6%AC-%EB%A1%9C%EB%94%A9%ED%95%98%EA%B8%B0\">네트워크 요청 미리 로딩하기</a></li>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8-%EA%B5%AC%ED%98%84\">기본 구현</a></li>\n<li><a href=\"#%EB%B3%B4%EB%8B%A4-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%AF%B8%EB%A6%AC-%EB%A1%9C%EB%94%A9-%ED%8C%A8%ED%84%B4\">보다 “확장 가능한” 미리 로딩 패턴</a></li>\n<li><a href=\"#%EA%B5%AC%ED%98%84\">구현</a></li>\n<li><a href=\"#%EC%9E%A5%EC%A0%90%EA%B3%BC-%EA%B3%A0%EB%A0%A4-%EC%82%AC%ED%95%AD\">장점과 고려 사항</a></li>\n</ul>","excerpt":"원문 : Flexible network data preloading in large SPAs 주의: 이 글은 클라이언트 사이드에서 렌더링하는 SPA의 성능을 개선하기 위한 맞춤형 솔루션에 중점을 둡니다. Next.js, Remix…","html":"<blockquote>\n<p>원문 : <a href=\"https://mmazzarolo.com/blog/2024-07-29-data-preloading-script/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Flexible network data preloading in large SPAs</a></p>\n</blockquote>\n<blockquote>\n<p><strong>주의</strong>: 이 글은 클라이언트 사이드에서 렌더링하는 SPA의 성능을 개선하기 위한 맞춤형 솔루션에 중점을 둡니다. Next.js, Remix와 같은 프레임워크를 사용 중이라면, 이러한 최적화는 자동으로 처리되는 경우가 많습니다 :)</p>\n</blockquote>\n<p>제 경험상으로 클라이언트 사이드 렌더링을 구현할 때 중요한 최적화 중 하나는 페이지 로드 시 네트워크 데이터를 미리 로딩하는 것입니다. 제가 근무했던 세 회사에서 경험한 바로는, 대규모 SPA는 일반적으로 페이지 로드 시 일련의 네트워크 요청이 필요합니다. 예를 들어, 사용자 인증 데이터나 환경 구성요소 등을 로드하기 위해서 말이죠.</p>\n<p>리액트 애플리케이션을 처음 작성할 때 이러한 네트워크 요청은 보통 리액트 앱이 마운트된 후에 시작됩니다. 이 접근 방식은 효과가 있긴 하지만, 애플리케이션이 확장됨에 따라 비효율적일 수 있습니다. 앱 번들이 다운로드, 파싱되고 리액트 앱이 로드될 때까지 기다려서 네트워크 요청을 시작할 필요가 있을까요? 이런 과정과 네트워크 요청을 병렬로 실행할 수도 있는데 말이죠.</p>\n<h3 id=\"네트워크-요청-미리-로딩하기\" style=\"position:relative;\"><a href=\"#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9A%94%EC%B2%AD-%EB%AF%B8%EB%A6%AC-%EB%A1%9C%EB%94%A9%ED%95%98%EA%B8%B0\" aria-label=\"네트워크 요청 미리 로딩하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>네트워크 요청 미리 로딩하기</h3>\n<p>최신 브라우저는 이와 같은 특정 상황을 처리하기 위해 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">link rel=\"preload\"</code></a> 및 <a href=\"https://web.dev/learn/performance/resource-hints?hl=ko\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">리소스 힌트</a> 같은 도구를 제공합니다. 이러한 도구는 필요한 네트워크 요청을 최대한 빨리 시작하는 데 사용됩니다. 그러나 이는 주로 단순하고 하드코딩된 요청에만 한정됩니다. 보다 복잡한 시나리오에서는 기존 프레임워크 솔루션에 의존하거나 직접 구현해야 할 수도 있습니다.</p>\n<p>맞춤형 솔루션을 구축해야만 할 경우, 제가 선호하는 방법은 HTML 문서의 헤드에 작은 자바스크립트 스크립트를 삽입하여 네트워크 요청을 즉시 시작하는 것입니다. 브라우저 힌트와 달리, 이 스크립트는 개발자가 완전히 제어할 수 있어 조건부 요청, 요청 워터폴, 웹소켓 연결 처리 등의 복잡한 동작을 구현할 수 있습니다.</p>\n<h3 id=\"기본-구현\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EA%B5%AC%ED%98%84\" aria-label=\"기본 구현 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 구현</h3>\n<p>예를 들어, 사용자 데이터를 로드하기 위해 필요한 네트워크 요청을 미리 로딩하는 간단한 예제는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&lt;!-- index.html --></span>\n\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n      <span class=\"token comment\">// 고수준에서 미리 로딩하는 것이 어떻게 보이는지 보여주기 위해 간소화되었습니다.</span>\n      window<span class=\"token punctuation\">.</span>__userDataPromise <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> userPreferences <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/api/user-preferences/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>user<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> user<span class=\"token punctuation\">,</span> userPreferences <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/my-app.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// my-app.js</span>\n\n<span class=\"token comment\">// 역시나 매우 단순한 접근 방식입니다. 실제 애플리케이션에서는 리액트 쿼리와 같은 유틸리티를 사용해 프로미스를 처리하는 것이 좋습니다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>userData<span class=\"token punctuation\">,</span> setUserData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">loadUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setUserData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> window<span class=\"token punctuation\">.</span>__userDataPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">loadUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 방법은 간단한 사용 사례에서는 효과적이지만, 애플리케이션이 커지면 번거로워질 수 있습니다. 예를 들어, 대부분의 경우 미리 로드하려는 플로우는 앱 실행 중에 다시 호출하게 될 플로우일 가능성이 높습니다. 위 예제의 경우, 사용자가 다시 로그인하거나 계정을 변경한 후 사용자 및 구성 데이터를 다시 가져오고 싶을 수 있습니다.</p>\n<h3 id=\"보다-확장-가능한-미리-로딩-패턴\" style=\"position:relative;\"><a href=\"#%EB%B3%B4%EB%8B%A4-%ED%99%95%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%AF%B8%EB%A6%AC-%EB%A1%9C%EB%94%A9-%ED%8C%A8%ED%84%B4\" aria-label=\"보다 확장 가능한 미리 로딩 패턴 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>보다 “확장 가능한” 미리 로딩 패턴</h3>\n<p>이를 해결하기 위해, 제가 가장 많이 사용하는 패턴은 앱 내의 모든 함수를 “미리 로딩 가능”하게 만드는 것입니다. 기본적인 단계는 다음과 같습니다.</p>\n<ol>\n<li>SPA 코드에서 미리 로딩할 함수를 정의합니다.</li>\n<li>해당 함수를 withPreload API로 감싸고 내보냅니다.</li>\n<li>프리 로딩 스크립트에서 함수를 불러와 실행합니다.</li>\n<li>런타임에, 함수는 실행 전에 미리 로딩된 결과를 확인합니다.</li>\n</ol>\n<h3 id=\"구현\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%ED%98%84\" aria-label=\"구현 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구현</h3>\n<p>이 패턴을 구현하는 간단한 코드 예제는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// my-app/data-preloader.ts</span>\n\n<span class=\"token comment\">/**\n * `DataPreloader`는 데이터를 가능한 빨리 미리 로딩하고 필요할 때 사용할 수 있는 유틸리티입니다.\n * 예를 들어, 사용자 정보나 설정을 앱 렌더링 *전에* 미리 로딩하여 UI 렌더링을 기다릴 필요 없이 데이터를 가져와 워터폴 효과를 피할 수 있습니다.\n *\n * `withPreload` 함수는 미리 로딩할 데이터를 위한 함수를 감싸는 고차 함수입니다.\n * 호출 시 미리 로딩된 프로미스를 반환하거나, 없으면 원래 함수를 호출합니다.\n * 반환된 함수는 데이터를 미리 로딩할 수 있는 `preload` 메서드도 가집니다.\n *\n * 이를 통해 코드의 한 부분에서 데이터를 미리 로딩하고, 다른 부분에서 사용할 수 있습니다.\n * 데이터가 미리 로딩된 경우 프로미스를 반환하고, 그렇지 않으면 원래 함수를 호출합니다.\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">PreloadEntry<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  promise<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  status<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'resolved'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rejected'</span><span class=\"token punctuation\">;</span>\n  result<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  error<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DataPreloader</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> entries<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> PreloadEntry<span class=\"token operator\">&lt;</span><span class=\"token builtin\">unknown</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이것이 SPA 코드에서 호출되면, 미리 로딩하는 스크립트에서 생성된 프로미스로 다시 수화합니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>__dataPreloader_entries<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>__dataPreloader_entries<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 이것이 프리로드 스크립트인 경우, window 객체에 프로미스를 노출합니다.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      window<span class=\"token punctuation\">.</span>__dataPreloader_entries <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 프로미스를 시작하고 이를 전역 목록에 저장된 프로미스로 관리합니다.</span>\n  <span class=\"token generic-function\"><span class=\"token function\">preload</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> entry<span class=\"token operator\">:</span> PreloadEntry<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">,</span>\n      promise<span class=\"token operator\">:</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 이것이 프리로딩을 시작하는 것입니다.</span>\n      status<span class=\"token operator\">:</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 이는 주로 프로미스 상태를 기다리지 않고 확인하려는 경우를 위해 추가된 것입니다.</span>\n    entry<span class=\"token punctuation\">.</span>promise\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        entry<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">'resolved'</span><span class=\"token punctuation\">;</span>\n        entry<span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        entry<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token string\">'rejected'</span><span class=\"token punctuation\">;</span>\n        entry<span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> error<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">.</span>promise<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 특정 프로미스에 대해 미리 로딩된 데이터가 있으면 결과를 반환하고 목록에서 프로미스를 삭제합니다. (오래된 데이터를 반환하지 않았음을 보장하기 위해서)</span>\n  <span class=\"token comment\">// 여기서 개선할 수 있는 점은 최근에 미리 로딩된 경우에만 프로미스를 사용하는 방법입니다. -- 역시, 신선하지 않은 데이터를 피하기 위함입니다.</span>\n  <span class=\"token generic-function\"><span class=\"token function\">consumePreloadedPromise</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> preloadEntry <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preloadEntry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>entries<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> preloadEntry<span class=\"token punctuation\">.</span>promise <span class=\"token keyword\">as</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 싱글톤으로 내보냅니다.</span>\n<span class=\"token keyword\">const</span> dataPreloader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataPreloader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 여기서 또 다른 개선점은 함수에 매개변수를 전달할 수 있게 하는 것입니다.</span>\n<span class=\"token comment\">// 이를 위해 매개변수를 문자열로 직렬화하고 키로 사용하여, 이를테면 다른 매개변수로 실행된 프리 로딩과 혼동되지 않도록 할 수 있습니다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> withPreload <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">func</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">preloadableFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> dataPreloader<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">consumePreloadedPromise</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 함수에 \"preload\" 메서드를 노출하여 미리 로딩을 시작할 수 있도록 합니다.</span>\n  preloadableFunc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">preload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> dataPreloader<span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> preloadableFunc<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// my-app/load-user-data.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fetchUser<span class=\"token punctuation\">,</span> fetchUserPreferences <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./api'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getUserAuthToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./auth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> withPreload <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./data-preloader'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">UserData</span> <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span> isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">;</span> userPreferences<span class=\"token operator\">:</span> UserPreferences <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_loadUserData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> userAuthToken <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUserAuthToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>userAuthToken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> userPreferences <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetchUserPreferences</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> userPreferences <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 위 함수를 미리 로딩 가능하게 만들려면 `withPreload`로 감싸고, SPA에서 고유한 ID를 할당하세요.</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">LOAD_USER_DATA_PRELOAD_ID</span> <span class=\"token operator\">=</span> <span class=\"token string\">'loadUserData'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> loadUserData <span class=\"token operator\">=</span> <span class=\"token function\">withPreload</span><span class=\"token punctuation\">(</span>\n  <span class=\"token constant\">LOAD_USER_DATA_PRELOAD_ID</span><span class=\"token punctuation\">,</span>\n  _loadUserData\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// my-app/app.tsx</span>\n\n<span class=\"token comment\">// 앱의 어느 부분에서든 `loadUserData`를 그대로 사용하면, 데이터가 미리 로딩되었는지 아닌지 걱정할 필요가 없습니다.</span>\n<span class=\"token keyword\">const</span> userData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// my-app/preload-script-entry-point.ts</span>\n\n<span class=\"token comment\">/**\n * 이 파일은 데이터 프리로더의 진입점입니다.\n * SPA의 나머지 부분과는 별도의 스크립트로 주입되어 가능한 빨리 데이터를 미리 로딩할 수 있습니다.\n * 보통 웹팩과 같은 번들러를 사용해 이 파일을 별도로 분리하는 것이 좋습니다.\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loadUserData <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./load-user-data'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> loadUserData<span class=\"token punctuation\">.</span><span class=\"token function\">preload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서는 <code class=\"language-text\">withPreload</code>를 사용하여 사용자 데이터를 미리 로딩하고 있습니다. 하지만, 이 패턴을 확장하여 다른 정보를 미리 로딩할 수도 있습니다. 미리 로딩하고 싶은 함수를 <code class=\"language-text\">withPreload</code>로 감싸고, 미리 로딩 스크립트에서 시작하기만 하면 됩니다. 또한, URL, 쿠키, 로컬 스토리지 등을 기반으로 미리 로딩 여부를 결정하는 로직을 추가할 수 있습니다.</p>\n<h3 id=\"장점과-고려-사항\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90%EA%B3%BC-%EA%B3%A0%EB%A0%A4-%EC%82%AC%ED%95%AD\" aria-label=\"장점과 고려 사항 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점과 고려 사항</h3>\n<p>앞서 언급했듯이 이것은 이 패턴의 작동 방식을 보여주는 간단한 예시이며, 프리로딩 만료 로직 추가, withPreload의 매개변수 매칭 지원 등 다양한 개선 방법이 있습니다. 일반적으로 이 패턴은 저의 사용 사례에서 효과적이었지만, 모든 상황에 맞는 해결책은 아닙니다. 프리로딩 스크립트에 과도하게 의존성을 추가하지 않도록 주의하세요. 그렇지 않으면 스크립트가 너무 커져서 다운로드 및 파싱이 비효율적일 수 있습니다.</p>\n<p>이 패턴을 자신의 스타일과 사용 사례에 맞게 더 발전시켜 보세요 :)</p>\n<blockquote>\n<p>🚀 한국어로 된 프런트엔드 아티클을 빠르게 받아보고 싶다면 <a href=\"https://kofearticle.substack.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Korean FE Article</a>을 구독해주세요!</p>\n</blockquote>","fields":{"slug":"/spa-preloading/"},"frontmatter":{"title":"(번역) 대규모 SPA에서 유연하게 네트워크 데이터 미리 로딩하기","date":"2024-08-15","lastUpdated":"2024-08-15","description":"페이지 로드 시 네트워크 데이터를 미리 로딩하여 SPA 렌더링 성능을 개선하는 방법을 코드를 통해 설명하며 원글 저자의 경험을 나누어주는 글을 소개해드립니다.","tags":["React"]}},"previous":{"fields":{"slug":"/react-compiler-closure-performance/"},"frontmatter":{"title":"(번역) 교묘한 리액트 메모리 누수 - 리액트 컴파일러가 당신을 구하지 못하는 이유"}},"next":null},"pageContext":{"id":"afda2d81-bd1d-5c1f-8897-562b376d1616","previousPostId":"304e19c6-94cf-5da3-88fd-4dd010e44408","nextPostId":null,"ogImage":"public/og-image/spa-preloading/index.png"}},"staticQueryHashes":["2260143708","984448874"]}