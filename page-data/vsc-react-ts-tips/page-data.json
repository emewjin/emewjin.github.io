{
    "componentChunkName": "component---src-templates-blog-post-tsx",
    "path": "/vsc-react-ts-tips/",
    "result": {"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io","thumbnail":"/thumbnails/zzal.jpg"}},"markdownRemark":{"id":"a5ecaf61-1800-5ffb-9d62-935946067464","tableOfContents":"<ul>\n<li>\n<p><a href=\"#1-%EC%8A%A4%EB%8B%88%ED%8E%AB-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">1. 스니펫 사용하기</a></p>\n</li>\n<li>\n<p><a href=\"#2-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">2. 리팩토링 기능 사용하기</a></p>\n<ul>\n<li><a href=\"#2-1-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\">2-1. 인터페이스 추출하기</a></li>\n<li><a href=\"#2-2-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\">2-2. 컴포넌트 추출하기</a></li>\n</ul>\n</li>\n</ul>","excerpt":"개인적으로 리액트 컴포넌트를 작성할 때 타이핑을 최소화하기 위해 사용하고 있는 방법들을 소개합니다 🤗 언제나 이것보다 더 좋은 방법들을 찾아 헤매고 있습니다. 1. 스니펫 사용하기 vsc extension 검색창에 ‘react snippet’으로 검색해보면 여러 extension…","html":"<p>개인적으로 리액트 컴포넌트를 작성할 때 타이핑을 최소화하기 위해 사용하고 있는 방법들을 소개합니다 🤗<br>\n언제나 이것보다 더 좋은 방법들을 찾아 헤매고 있습니다.</p>\n<h2 id=\"1-스니펫-사용하기\" style=\"position:relative;\"><a href=\"#1-%EC%8A%A4%EB%8B%88%ED%8E%AB-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"1 스니펫 사용하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스니펫 사용하기</h2>\n<p>vsc extension 검색창에 ‘react snippet’으로 검색해보면 여러 extension이 등장하는데, 저는 아래 extension을 사용하고 있습니다.</p>\n<img src=\"https://user-images.githubusercontent.com/76927618/182015397-2a2d6d0f-e1d8-4ad9-a7d8-d7fc9d4c8359.png\" alt=\"스니펫\" style=\"width: 80%;\">\n<p>스니펫의 종류를 다 외울 수는 없기 때문에 <code class=\"language-text\">커맨드+shift+P</code> 로 액션을 열고 <code class=\"language-text\">Snippet Search</code>를 입력하거나, <code class=\"language-text\">커맨드+shift+R</code> 로 다음과 같이 스니펫 목록을 열어 필요한 걸 찾아 이용하면 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/182015451-24dcb69c-a0d4-473c-984c-38e3e99c040f.png\" alt=\"image\"></p>\n<p>주로 사용하는 것은 컴포넌트 보일러 플레이트를 위한 스니펫으로, <code class=\"language-text\">rfc</code> 를 가장 많이 사용합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/182015641-19a133d7-60b1-45e1-a95b-97e6911ddb49.gif\" alt=\"screencast 2022-07-31 16-46-44\"></p>\n<p>props의 타입까지 같이 작성해주는 <code class=\"language-text\">tsrfc</code>도 있긴 한데 인터페이스를 더 좋아해서 쓰지 않고 있습니다. 대신 인터페이스 선언은 리팩토링 기능으로 작성하고 있습니다.</p>\n<p>물론 extension을 설치하지 않고도 직접 스니펫을 만들어 사용할 수도 있습니다.</p>\n<img style=\"width: 80%;\" alt=\"유저스니펫\" src=\"https://user-images.githubusercontent.com/76927618/182016547-3755cd4b-a22d-47a5-b7fd-503741e447f0.png\">\n<h2 id=\"2-리팩토링-기능-사용하기\" style=\"position:relative;\"><a href=\"#2-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81-%EA%B8%B0%EB%8A%A5-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"2 리팩토링 기능 사용하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 리팩토링 기능 사용하기</h2>\n<p>시작하기 전에 : 모든 리팩토링의 단축키는 <code class=\"language-text\">커맨드 + .</code> 또는 <code class=\"language-text\">컨트롤 + 커맨드 + R</code>입니다.</p>\n<h3 id=\"2-1-인터페이스-추출하기\" style=\"position:relative;\"><a href=\"#2-1-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"2 1 인터페이스 추출하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 인터페이스 추출하기</h3>\n<p>컴포넌트 prop의 타입 인터페이스는 일단 그냥 작성하고, vsc의 리팩토링 기능인 <code class=\"language-text\">Extract to interface</code>로 추출하고 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/182015730-ef2c562f-444c-4f6d-b7c4-7831710047aa.gif\" alt=\"screencast 2022-07-31 16-50-32\"></p>\n<h3 id=\"2-2-컴포넌트-추출하기\" style=\"position:relative;\"><a href=\"#2-2-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"2 2 컴포넌트 추출하기 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 컴포넌트 추출하기</h3>\n<p>가끔 컴포넌트의 일부분을 별도의 컴포넌트로 분리해야할 때가 있는데요.<br>\n기본적으로 vsc 리팩토링에서 함수나 변수로 추출하는 기능을 제공하고 있지만, 다음의 예제처럼 리팩토링의 결과가 1% 부족하다는 약간의 불편함이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 리팩토링 전</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> MyAppProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">MyApp</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 리팩토링 후</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> MyAppProps<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">MyApp</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Vscode react refactor</code> 라는 extension을 쓰면 그 약간의 불편함을 해소할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/182015992-3a957acc-11fa-4aa6-8df0-443d402655e4.png\" alt=\"image\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/182015978-83d4ae31-d19f-43af-a3a9-16c5eaf17988.gif\" alt=\"screencast 2022-07-31 16-58-37\"></p>\n<p>만약 분리한 컴포넌트를 새 파일로 만들고 싶다면 기본으로 제공하는 리팩토링 기능인 <code class=\"language-text\">move to a new file</code>을 이용하면 됩니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/76927618/182016050-650186cb-98ef-40d6-9619-d8b01fde1831.gif\" alt=\"screencast 2022-07-31 17-01-52\"></p>","fields":{"slug":"/vsc-react-ts-tips/"},"frontmatter":{"title":"vsc에서 리액트 컴포넌트 작성을 위한 타이핑을 최소화하기","date":"2022-07-31","lastUpdated":"2022-07-31","description":"더 좋은 방법 알려주실 분 구함","tags":["React"],"thumbnail":null}},"previous":{"fields":{"slug":"/why-not-fc/"},"frontmatter":{"title":"리액트에서 FC를 사용하지 말아야 하는 이유"}},"next":{"fields":{"slug":"/storybook/"},"frontmatter":{"title":""}}},"pageContext":{"id":"a5ecaf61-1800-5ffb-9d62-935946067464","previousPostId":"0e2c0d7f-0699-575f-8530-a51bf73e37cf","nextPostId":"6b4355e4-ba1f-5b58-b176-26c60577d70b"}},
    "staticQueryHashes": ["2260143708","658623446","984448874"]}