{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/html-attribute-dom-property/","result":{"data":{"site":{"siteMetadata":{"title":"emewjin.log","siteUrl":"https://emewjin.github.io"}},"markdownRemark":{"id":"b76364c0-0e32-5db9-9385-41fb54c6c624","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%ED%95%B5%EC%8B%AC-%EC%B0%A8%EC%9D%B4%EC%A0%90\">핵심 차이점</a></p>\n<ul>\n<li><a href=\"#html-%EC%A7%81%EB%A0%AC%ED%99%94\">HTML 직렬화</a></li>\n<li><a href=\"#%EA%B0%92value%EC%9D%98-%ED%83%80%EC%9E%85\">값(value)의 타입</a></li>\n<li><a href=\"#%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90-%EA%B5%AC%EB%B6%84\">대소문자 구분</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B0%98%EC%98%81\">반영</a></p>\n<ul>\n<li><a href=\"#%EC%9E%91%EB%AA%85%EC%9D%98-%EC%B0%A8%EC%9D%B4\">작명의 차이</a></li>\n<li><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D-%ED%98%95-%EB%B3%80%ED%99%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EA%B0%92\">유효성 검증, 형 변환, 그리고 기본값</a></li>\n<li><a href=\"#input%EC%9D%98-value\">input의 <code class=\"language-text\">value</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%86%8D%EC%84%B1\">구성을 위한 속성</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EA%B0%80-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">프레임워크가 차이점을 처리하는 방법</a></p>\n<ul>\n<li><a href=\"#preact%EC%99%80-vuejs\">Preact와 VueJS</a></li>\n<li><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8\">리액트</a></li>\n<li><a href=\"#lit-html\">lit-html</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B7%B8%EA%B2%8C-%EB%8B%A4%EC%9E%85%EB%8B%88%EB%8B%A4\">그리고 그게 다입니다</a></p>\n</li>\n</ul>","excerpt":"원문: HTML attributes vs DOM properties 속성(attribute)과 프로퍼티(property…","html":"<blockquote>\n<p>원문: <a href=\"https://jakearchibald.com/2024/attributes-vs-properties/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTML attributes vs DOM properties</a></p>\n</blockquote>\n<p>속성(attribute)과 프로퍼티(property)는 <strong>근본적으로</strong> 다른 개념입니다. 같은 이름의 속성과 프로퍼티를 서로 다른 값으로 설정할 수 있습니다. 예를 들면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>…<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div[foo=bar]'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bar'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n  div<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bar'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello world'</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>프레임워크 덕분에 이 사실을 아는 개발자가 점점 더 줄어들고 있는 것 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>...<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>프레임워크의 템플릿 언어에서 위의 작업을 수행하는 경우 속성과 유사한 구문을 사용하지만 내부적으로 프로퍼티를 대신 설정하는 경우가 있으며, 프레임워크마다 다르게 동작합니다. 경우에 따라서는 부수 효과로 속성과 프로퍼티를 <em>모두</em> 설정하는 경우도 있지만 이는 프레임워크의 문제가 아닙니다.</p>\n<p>대부분의 경우 이를 구분하는 것은 중요하지 않습니다. 저는 개발자가 프로퍼티와 속성의 차이를 신경 쓰지 않고도 오랫동안 행복한 커리어를 쌓을 수 있는 것은 좋은 일이라고 생각합니다. 하지만 더 낮은 수준에서 DOM을 파헤쳐야 하는 경우 알아두면 도움이 됩니다. 차이점을 알고 있다고 생각하시더라도 미처 생각하지 못했을 몇 가지 세부 사항에 대해 말씀드리겠습니다. 그럼 시작해 보겠습니다…</p>\n<h2 id=\"핵심-차이점\" style=\"position:relative;\"><a href=\"#%ED%95%B5%EC%8B%AC-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"핵심 차이점 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>핵심 차이점</h2>\n<p>이 흥미로운 내용을 살펴보기 전에 몇 가지 기술적 차이점을 먼저 알아보겠습니다.</p>\n<h3 id=\"html-직렬화\" style=\"position:relative;\"><a href=\"#html-%EC%A7%81%EB%A0%AC%ED%99%94\" aria-label=\"html 직렬화 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 직렬화</h3>\n<p>속성은 HTML로 직렬화되지만 프로퍼티는 그렇지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndiv<span class=\"token punctuation\">.</span>hello <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '&lt;div foo=\"bar\">&lt;/div>'</span></code></pre></div>\n<p>따라서 브라우저 개발자 도구의 요소 패널에선 프로퍼티가 아닌 요소의 속성만 볼 수 있습니다.</p>\n<h3 id=\"값value의-타입\" style=\"position:relative;\"><a href=\"#%EA%B0%92value%EC%9D%98-%ED%83%80%EC%9E%85\" aria-label=\"값value의 타입 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>값(value)의 타입</h3>\n<p>직렬화된 형식으로 작업하기 위해 속성 값은 항상 문자열이지만 프로퍼티는 모든 타입이 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ndiv<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'string'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// '[object Object]'</span>\n\ndiv<span class=\"token punctuation\">.</span>hello <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> div<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'object'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// { foo: 'bar' }</span></code></pre></div>\n<h3 id=\"대소문자-구분\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%86%8C%EB%AC%B8%EC%9E%90-%EA%B5%AC%EB%B6%84\" aria-label=\"대소문자 구분 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대소문자 구분</h3>\n<p>속성의 이름은 대소문자를 구분하지 않지만 프로퍼티의 이름은 대소문자를 구분합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">HeLlO</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>world<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#test'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttributeNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['id', 'hello']</span>\n\n  div<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FOO'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttributeNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['id', 'hello', 'foo']</span>\n\n  div<span class=\"token punctuation\">.</span>TeSt <span class=\"token operator\">=</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>TeSt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'value'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그러나 속성의 <em>값은</em> 대소문자를 구분합니다.</p>\n<p>자, 여기서부터 상황이 모호해지기 시작합니다.</p>\n<h2 id=\"반영\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EC%98%81\" aria-label=\"반영 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반영</h2>\n<p>이 코드를 좀 보세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> div <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo'</span>\n\n  div<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bar'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'bar'</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 글의 첫 번째 예제와 모순되는 것처럼 보이지만, 위의 예제가 작동하는 이유는 <code class=\"language-text\">Element</code>에 <code class=\"language-text\">id</code> 속성을 ‘반영’하는 <code class=\"language-text\">id</code> getter 및 setter가 있기 때문입니다.</p>\n<p>프로퍼티가 속성을 반영할 때, <em>속성</em> 이 데이터의 원천입니다. 프로퍼티를 설정하면 속성이 업데이트됩니다. 프로퍼티를 읽으면 속성을 읽는 것입니다.</p>\n<p>편의를 위해 대부분의 스펙은 정의된 모든 속성에 해당하는 프로퍼티를 생성합니다. 이 글의 시작 부분에 있는 예제는 동작하지 않는데, <code class=\"language-text\">foo</code>가 스펙에 정의된 속성이 아니므로 이를 반영하는 스펙에 정의된 <code class=\"language-text\">foo</code> 프로퍼티도 없기 때문입니다.</p>\n<p><a href=\"https://html.spec.whatwg.org/multipage/grouping-content.html#the-ol-element\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">여기 <code class=\"language-text\">&lt;ol></code>에 대한 스펙이 있습니다.</a> “콘텐츠 속성” 섹션은 속성을 정의하고 “DOM 인터페이스”는 프로퍼티를 정의합니다. DOM 인터페이스에서 <code class=\"language-text\">reversed</code>를 클릭하면 다음으로 이동합니다.</p>\n<blockquote>\n<p><code class=\"language-text\">reversed</code>와 <code class=\"language-text\">type</code> IDL 속성들은 반드시 같은 이름의 콘텐츠 속성을 <a href=\"https://html.spec.whatwg.org/multipage/common-dom-interfaces.html#reflect\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">반영</a>해야 합니다.</p>\n</blockquote>\n<p>하지만 일부 반영자(reflector)들은 더 복잡합니다…</p>\n<h3 id=\"작명의-차이\" style=\"position:relative;\"><a href=\"#%EC%9E%91%EB%AA%85%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"작명의 차이 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작명의 차이</h3>\n<p>비교적 사소한 문제이지만 프로퍼티가 반영하는 속성과 다른 이름을 가진 경우가 있습니다.</p>\n<p>경우에 따라서는 프로퍼티에서 사용하는 표기법을 반영합니다.</p>\n<ul>\n<li><code class=\"language-text\">&lt;img></code>에서 <code class=\"language-text\">el.crossOrigin</code>은 <code class=\"language-text\">crossorigin</code> 속성을 반영합니다.</li>\n<li>모든 요소에서 <code class=\"language-text\">el.ariaLabel</code>은 <code class=\"language-text\">aria-label</code> 속성을 반영합니다. (2023년 말에 모든 브라우저가 aria 반영자를 적용했습니다. 그전에는 속성만 사용할 수 있었습니다.)</li>\n</ul>\n<p>오래된 자바스크립트 예약어와 겹치는 경우에는 이름을 변경해야 했습니다.</p>\n<ul>\n<li>모든 요소에서 <code class=\"language-text\">el.className</code>은 <code class=\"language-text\">class</code> 속성을 반영합니다.</li>\n<li><code class=\"language-text\">&lt;label></code>에서 <code class=\"language-text\">el.htmlFor</code>는 <code class=\"language-text\">for</code> 속성을 반영합니다.</li>\n</ul>\n<h3 id=\"유효성-검증-형-변환-그리고-기본값\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D-%ED%98%95-%EB%B3%80%ED%99%98-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B8%B0%EB%B3%B8%EA%B0%92\" aria-label=\"유효성 검증 형 변환 그리고 기본값 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유효성 검증, 형 변환, 그리고 기본값</h3>\n<p>속성과 달리 프로퍼티들은 유효성 검증과 기본값이 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'text'</span>\n\ninput<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'number'</span>\n\ninput<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'foo'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'text'</span></code></pre></div>\n<p>이 경우 <code class=\"language-text\">type</code> getter에 의해 유효성 검사가 수행됩니다. setter가 유효하지 않은 값 <code class=\"language-text\">'foo'</code>를 허용했더라도 getter가 값이 유효하지 않거나 없다는 것을 확인하면 <code class=\"language-text\">'text'</code>를 반환합니다.</p>\n<p>일부 프로퍼티는 형 변환을 수행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span> <span class=\"token attr-name\">open</span><span class=\"token punctuation\">></span></span>…<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> details <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'details'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n  details<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\n  details<span class=\"token punctuation\">.</span>open <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ''</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>details<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>이 경우 <code class=\"language-text\">open</code> 프로퍼티는 속성의 존재 여부를 반환하는 불리언입니다. setter는 타입을 강제로 변환합니다. setter에 <code class=\"language-text\">'hello'</code>가 주어지더라도 속성으로 바로 할당되지 않고 불리언으로 바뀝니다.</p>\n<p><code class=\"language-text\">img.height</code>와 같은 프로퍼티는 속성 값을 숫자로 강제로 변환합니다. setter는 들어오는 값을 숫자로 변환하고 음수 값은 0으로 처리합니다.</p>\n<h3 id=\"input의-value\" style=\"position:relative;\"><a href=\"#input%EC%9D%98-value\" aria-label=\"input의 value permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>input의 <code class=\"language-text\">value</code></h3>\n<p><code class=\"language-text\">value</code>또한 흥미롭습니다. 여기 <code class=\"language-text\">value</code> 프로퍼티와 <code class=\"language-text\">value</code> 속성이 있습니다. 그러나 <code class=\"language-text\">value</code> 프로퍼티는 <code class=\"language-text\">value</code> 속성을 반영하지 않습니다. 대신 <code class=\"language-text\">defaultValue</code> 프로퍼티가 <code class=\"language-text\">value</code> 속성을 반영합니다.</p>\n<p>알아요, 알아요.</p>\n<p>사실 <code class=\"language-text\">value</code> 프로퍼티는 <em>어떤</em> 속성도 반영하지 않습니다. 이는 드문 일이 아니며, 이러한 속성은 수없이 많습니다 (<code class=\"language-text\">offsetWidth</code>, <code class=\"language-text\">parentNode</code>, 어떤 이유로의 체크박스의 <code class=\"language-text\">indeterminate</code> 등).</p>\n<p>처음에 <code class=\"language-text\">value</code> 프로퍼티는 <code class=\"language-text\">defaultValue</code> 프로퍼티를 참조합니다. 그런 다음 자바스크립트 또는 사용자 상호작용을 통해 <code class=\"language-text\">value</code> 프로퍼티가 설정되면 내부 값으로 전환됩니다. <em>대략</em> 다음과 같이 구현되는 것처럼 보입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HTMLInputElement</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HTMLElement</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">defaultValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">defaultValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  #value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">get</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#value <span class=\"token operator\">??</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>defaultValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">set</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#value <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 관련 폼이 재설정될 때 발생합니다.</span>\n  <span class=\"token function\">formResetCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>#value <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그래서,</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'default'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'default'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'default'</span>\n\n  input<span class=\"token punctuation\">.</span>defaultValue <span class=\"token operator\">=</span> <span class=\"token string\">'new default'</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'new default'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'new default'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'new default'</span>\n\n  <span class=\"token comment\">// 전환점입니다.</span>\n  input<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'hello!'</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'new default'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello!'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'new default'</span>\n\n  input<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'another new default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'another new default'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'hello!'</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'another new default'</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><code class=\"language-text\">value</code> 속성 이름을 <code class=\"language-text\">defaultvalue</code>로 지정했다면 훨씬 더 이해가 쉬웠을 것입니다. 지금은 너무 늦었습니다.</p>\n<h2 id=\"구성을-위한-속성\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%86%8D%EC%84%B1\" aria-label=\"구성을 위한 속성 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구성을 위한 속성</h2>\n<p>제 생각에는 속성은 구성을 위한 것이어야 하고, 반면 프로퍼티는 상태를 포함할 수 있습니다. 또한 light-DOM 트리에는 단일 소유자가 있어야 한다고 생각합니다.</p>\n<p>그런 의미에서 <code class=\"language-text\">&lt;input value></code>가 (이름만 빼고) 옳다고 생각합니다. <code class=\"language-text\">value</code> 속성은 기본값을 구성하는 반면, <code class=\"language-text\">value</code> 프로퍼티는 현재 상태를 제공하니까요.</p>\n<p>또한 유효성 검증이 프로퍼티를 가져오거나 설정할 때는 수행되지만 속성을 가져오거나 설정할 때는 수행되지 않는다는 점도 이해가 됩니다.</p>\n<p>‘제 생각에는’이라고 말하는 이유는 최근 몇 가지 HTML 요소에서는 다르게 처리되었기 때문입니다.</p>\n<p><code class=\"language-text\">&lt;details></code> 및 <code class=\"language-text\">&lt;dialog></code> 요소는 <code class=\"language-text\">open</code> 속성을 통해 열린 상태를 나타내며, 브라우저는 사용자 상호 작용에 따라 이 속성을 스스로 추가/제거합니다.</p>\n<p>이것은 설계 실수라고 생각합니다. 이렇게 되면 속성은 구성을 위한 것이라는 개념이 깨집니다. 더 중요한 것은 DOM을 유지 관리하는 시스템(프레임워크 또는 바닐라 JS)이 DOM 자체가 변경될 수 있다는 것에 대비해야 함을 의미합니다.</p>\n<p>저는 이렇게 되어야 한다고 생각합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>details</span> <span class=\"token attr-name\">defaultopen</span><span class=\"token punctuation\">></span></span>…<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>details</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>그리고 <code class=\"language-text\">details.open</code> 프로퍼티로 현재 상태를 가져오거나 설정하고, 해당 상태를 타겟팅하는 CSS 의사 클래스가 있어야 합니다.</p>\n<p>업데이트: <a href=\"https://twitter.com/zcorpan\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simon Peters</a>가 <a href=\"https://lists.whatwg.org/pipermail/whatwg-whatwg.org/2007-August/054532.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이와 관련된 초기 설계 논의</a> 일부를 발굴했습니다.</p>\n<p>제 생각에는 <code class=\"language-text\">contenteditable</code> 도 이 계약을 깨뜨리겠지만… 음… 많은 결함을 선택적으로 수용하는 것이죠.</p>\n<h2 id=\"프레임워크가-차이점을-처리하는-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EA%B0%80-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"프레임워크가 차이점을 처리하는 방법 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프레임워크가 차이점을 처리하는 방법</h2>\n<p>다시 이 예제로 돌아가봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>…<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>…<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>…<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>…<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>프레임워크들은 어떻게 처리할까요?</p>\n<h3 id=\"preact와-vuejs\" style=\"position:relative;\"><a href=\"#preact%EC%99%80-vuejs\" aria-label=\"preact와 vuejs permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preact와 VueJS</h3>\n<p>속성을 선호하는 정해진 경우를 제외하고는 <code class=\"language-text\">요소에 propName이 있으면</code> prop을 프로퍼티로 설정하고, 그렇지 않으면 속성으로 설정합니다. 기본적으로 속성보다 프로퍼티를 선호합니다. render-to-string 메서드는 그 반대의 작업을 수행하며 프로퍼티 전용인 것은 무시합니다.</p>\n<ul>\n<li><a href=\"https://github.com/preactjs/preact/blob/aa95aa924dd5fe28798f2712acdabdc2e9fa38c9/src/diff/props.js#L37\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Preact의 <code class=\"language-text\">setProperty</code>.</a></li>\n<li><a href=\"https://github.com/vuejs/core/blob/958286e3f050dc707ad1af293e91bfb190bdb191/packages/runtime-dom/src/patchProp.ts#L69\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VueJS의 <code class=\"language-text\">shouldSetAsProp</code>.</a></li>\n</ul>\n<h3 id=\"리액트\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8\" aria-label=\"리액트 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트</h3>\n<p>리액트는 그 반대입니다. 프로퍼티를 선호하는 정해진 경우 외에도 속성을 설정합니다. 따라서 render-to-string 메서드의 로직이 비슷해집니다.</p>\n<p>이것이 리액트에서 커스텀 요소가 작동하지 않는 이유를 설명해줍니다. 커스텀 엘리먼트는 커스텀이기 때문에 프로퍼티가 리액트의 ‘미리 정의된 목록’에 있지 않으므로 대신 속성으로 설정됩니다. 커스텀 요소에 프로퍼티만 있는 것은 작동하지 않습니다. 이 문제는 리액트 19에서 수정되어 커스텀 요소에 대해서는 Preact/VueJS 모델로 전환될 예정입니다.</p>\n<p>재미있는 점은 리액트가 속성 <em>처럼 보이는 것</em> 에 <code class=\"language-text\">class</code> 대신 <code class=\"language-text\">className</code>을 사용하는 것이 대중화되었다는 것입니다. 그러나 속성 이름이 아닌 프로퍼티 이름을 사용하더라도 <a href=\"https://github.com/facebook/react/blob/699d03ce1a175442fe3443e1d1bed14f14e9c197/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L388-L389\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">리액트는 내부적으로 <code class=\"language-text\">class</code> 속성을 설정합니다.</a></p>\n<ul>\n<li><a href=\"https://github.com/facebook/react/blob/699d03ce1a175442fe3443e1d1bed14f14e9c197/packages/react-dom-bindings/src/client/ReactDOMComponent.js#L349\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">리액트의 <code class=\"language-text\">setProp</code></a></li>\n</ul>\n<h3 id=\"lit-html\" style=\"position:relative;\"><a href=\"#lit-html\" aria-label=\"lit html permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lit-html</h3>\n<p>Lit는 조금 다르게 처리합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>…<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">.value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>…<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>속성과 프로퍼티를 구분하기 위해 속성 대신에 프로퍼티를 설정하고 싶다면 이름 앞에 <code class=\"language-text\">.</code> 를 붙여야 합니다.</p>\n<ul>\n<li><a href=\"https://lit.dev/docs/templates/expressions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lit의 Expression 문서</a></li>\n</ul>\n<h2 id=\"그리고-그게-다입니다\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B7%B8%EA%B2%8C-%EB%8B%A4%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"그리고 그게 다입니다 permalink\" class=\"heading-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그리고 그게 다입니다</h2>\n<p>프로퍼티와 속성의 차이에 대해 제가 아는 거의 모든 것을 알려드렸습니다. 제가 놓친 부분이 있거나 궁금한 점이 있으면 아래 댓글로 알려주세요!</p>\n<p><a href=\"https://offthemainthread.tech/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">팟캐스트 남편</a>인 <a href=\"https://surma.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Surma</a>의 검토에 감사드립니다.</p>","fields":{"slug":"/html-attribute-dom-property/"},"frontmatter":{"title":"(번역) HTML 속성 vs DOM 프로퍼티","date":"2024-05-01","lastUpdated":"2024-05-01","description":"더 낮은 수준에서 DOM을 파헤쳐야 하는 경우 알아두면 도움이 될, HTML 속성(attribute)과 DOM 프로퍼티(property)의 차이점에 대해 알아보아요.","tags":["HTML"]}},"previous":{"fields":{"slug":"/infer-type-predicate/"},"frontmatter":{"title":"(번역) 제어 흐름 분석을 통해 함수 내부로부터 타입 서술어 추론하기"}},"next":null},"pageContext":{"id":"b76364c0-0e32-5db9-9385-41fb54c6c624","previousPostId":"1d07bf5a-4adc-5283-822a-f41790078591","nextPostId":null,"ogImage":"public/og-image/html-attribute-dom-property/index.png"}},"staticQueryHashes":["2260143708","984448874"]}